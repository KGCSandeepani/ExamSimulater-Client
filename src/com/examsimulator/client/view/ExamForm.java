/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.examsimulator.client.view;

import com.examsimulator.client.connector.ServerConnector;
import com.examsimulator.client.time.TimeShedular;
import com.examsimulator.common.controller.AnswerController;
import com.examsimulator.common.controller.ExamController;
import com.examsimulator.common.controller.ExamDetailController;
import com.examsimulator.common.controller.MarksController;
import com.examsimulator.common.controller.QuestionController;
import com.examsimulator.common.controller.SubjectContoller;
import com.examsimulator.common.dto.AnswerDTO;
import com.examsimulator.common.dto.ExamDTO;
import com.examsimulator.common.dto.ExamDetailDTO;
import com.examsimulator.common.dto.MarksDTO;
import com.examsimulator.common.dto.QuestionDTO;
import com.examsimulator.common.dto.SubjectDTO;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Lahiru Sandeepa
 */
public class ExamForm extends javax.swing.JFrame {

    List<QuestionDTO> questionDTOList;
    List<AnswerDTO> answerDTOList = new ArrayList<>();
    int total = 0;
    int lastMarks = 0;
    int time = 0;

    /**
     * Creates new form ExamForm
     */
    public ExamForm() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        buttonGroup7 = new javax.swing.ButtonGroup();
        buttonGroup8 = new javax.swing.ButtonGroup();
        buttonGroup9 = new javax.swing.ButtonGroup();
        buttonGroup10 = new javax.swing.ButtonGroup();
        panelBackGround = new javax.swing.JPanel();
        panelTitle = new javax.swing.JPanel();
        labelTitle = new javax.swing.JLabel();
        labelDate = new javax.swing.JLabel();
        labelTime = new javax.swing.JLabel();
        labelExit = new javax.swing.JLabel();
        labelMinimize = new javax.swing.JLabel();
        labelBack = new javax.swing.JLabel();
        labelExamId = new javax.swing.JLabel();
        labelStudentId = new javax.swing.JLabel();
        textExamId = new javax.swing.JTextField();
        textStudentId = new javax.swing.JTextField();
        labelStudentName = new javax.swing.JLabel();
        textStudentName = new javax.swing.JTextField();
        labelSubject = new javax.swing.JLabel();
        textSubject = new javax.swing.JTextField();
        separator = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaExam = new javax.swing.JTextArea();
        labelFinish = new javax.swing.JLabel();
        panelAnswer = new javax.swing.JPanel();
        radioButton1a = new javax.swing.JRadioButton();
        labelA = new javax.swing.JLabel();
        labelB = new javax.swing.JLabel();
        labelC = new javax.swing.JLabel();
        labelD = new javax.swing.JLabel();
        labelAnswer1 = new javax.swing.JLabel();
        radioButton1b = new javax.swing.JRadioButton();
        radioButton1c = new javax.swing.JRadioButton();
        radioButton1d = new javax.swing.JRadioButton();
        labelAnswer2 = new javax.swing.JLabel();
        labelAnswer3 = new javax.swing.JLabel();
        labelAnswer4 = new javax.swing.JLabel();
        labelAnswer5 = new javax.swing.JLabel();
        labelAnswer6 = new javax.swing.JLabel();
        labelAnswer7 = new javax.swing.JLabel();
        labelAnswer8 = new javax.swing.JLabel();
        labelAnswer9 = new javax.swing.JLabel();
        labelAnswer10 = new javax.swing.JLabel();
        radioButton2a = new javax.swing.JRadioButton();
        radioButton3a = new javax.swing.JRadioButton();
        radioButton4a = new javax.swing.JRadioButton();
        radioButton5a = new javax.swing.JRadioButton();
        radioButton6a = new javax.swing.JRadioButton();
        radioButton7a = new javax.swing.JRadioButton();
        radioButton8a = new javax.swing.JRadioButton();
        radioButton9a = new javax.swing.JRadioButton();
        radioButton10a = new javax.swing.JRadioButton();
        radioButton2b = new javax.swing.JRadioButton();
        radioButton2c = new javax.swing.JRadioButton();
        radioButton2d = new javax.swing.JRadioButton();
        radioButton3b = new javax.swing.JRadioButton();
        radioButton3c = new javax.swing.JRadioButton();
        radioButton3d = new javax.swing.JRadioButton();
        radioButton4b = new javax.swing.JRadioButton();
        radioButton4c = new javax.swing.JRadioButton();
        radioButton4d = new javax.swing.JRadioButton();
        radioButton5b = new javax.swing.JRadioButton();
        radioButton5c = new javax.swing.JRadioButton();
        radioButton5d = new javax.swing.JRadioButton();
        radioButton6b = new javax.swing.JRadioButton();
        radioButton6c = new javax.swing.JRadioButton();
        radioButton6d = new javax.swing.JRadioButton();
        radioButton7b = new javax.swing.JRadioButton();
        radioButton7c = new javax.swing.JRadioButton();
        radioButton7d = new javax.swing.JRadioButton();
        radioButton8b = new javax.swing.JRadioButton();
        radioButton8c = new javax.swing.JRadioButton();
        radioButton8d = new javax.swing.JRadioButton();
        radioButton9b = new javax.swing.JRadioButton();
        radioButton9c = new javax.swing.JRadioButton();
        radioButton9d = new javax.swing.JRadioButton();
        radioButton10b = new javax.swing.JRadioButton();
        radioButton10c = new javax.swing.JRadioButton();
        radioButton10d = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        panelBackGround.setBackground(new java.awt.Color(255, 255, 255));

        panelTitle.setBackground(new java.awt.Color(153, 0, 102));

        labelTitle.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        labelTitle.setForeground(new java.awt.Color(255, 255, 255));
        labelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTitle.setText("Exam Form");

        labelDate.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        labelDate.setText("jLabel1");

        labelTime.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        labelTime.setText("jLabel1");

        labelExit.setBackground(new java.awt.Color(255, 255, 255));
        labelExit.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelExit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelExit.setText("X");
        labelExit.setOpaque(true);
        labelExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelExitMouseClicked(evt);
            }
        });

        labelMinimize.setBackground(new java.awt.Color(255, 255, 255));
        labelMinimize.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelMinimize.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelMinimize.setText("-");
        labelMinimize.setOpaque(true);
        labelMinimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelMinimizeMouseClicked(evt);
            }
        });

        labelBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/examsimulator/client/image/Entypo_e75e(0)_64.png"))); // NOI18N
        labelBack.setText("jLabel1");
        labelBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelBackMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelTitleLayout = new javax.swing.GroupLayout(panelTitle);
        panelTitle.setLayout(panelTitleLayout);
        panelTitleLayout.setHorizontalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelBack, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTitleLayout.createSequentialGroup()
                        .addGap(373, 373, 373)
                        .addComponent(labelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(276, 276, 276)
                        .addGroup(panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelTime, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelDate, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(73, Short.MAX_VALUE))
                    .addGroup(panelTitleLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelMinimize, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelExit, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        panelTitleLayout.setVerticalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTitleLayout.createSequentialGroup()
                        .addGroup(panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelExit)
                            .addComponent(labelMinimize))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                        .addComponent(labelTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelDate)
                        .addGap(32, 32, 32))
                    .addGroup(panelTitleLayout.createSequentialGroup()
                        .addGroup(panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelTitleLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(labelTitle))
                            .addComponent(labelBack))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        labelExamId.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelExamId.setText("Exam Id");

        labelStudentId.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelStudentId.setText("Student Id");

        textExamId.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N

        textStudentId.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N

        labelStudentName.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelStudentName.setText("Student Name");

        textStudentName.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N

        labelSubject.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelSubject.setText("Subject");

        textSubject.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N

        separator.setForeground(new java.awt.Color(0, 0, 0));

        textAreaExam.setColumns(20);
        textAreaExam.setFont(new java.awt.Font("Monospaced", 0, 15)); // NOI18N
        textAreaExam.setRows(5);
        jScrollPane1.setViewportView(textAreaExam);

        labelFinish.setBackground(new java.awt.Color(255, 0, 0));
        labelFinish.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelFinish.setForeground(new java.awt.Color(255, 255, 255));
        labelFinish.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelFinish.setText("Finish");
        labelFinish.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        labelFinish.setOpaque(true);
        labelFinish.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelFinishMouseClicked(evt);
            }
        });

        panelAnswer.setBackground(new java.awt.Color(204, 204, 255));

        buttonGroup1.add(radioButton1a);

        labelA.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelA.setText("A");

        labelB.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelB.setText("B");

        labelC.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelC.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelC.setText("C");

        labelD.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelD.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelD.setText("D");

        labelAnswer1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelAnswer1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelAnswer1.setText("01.");

        buttonGroup1.add(radioButton1b);

        buttonGroup1.add(radioButton1c);

        buttonGroup1.add(radioButton1d);

        labelAnswer2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelAnswer2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelAnswer2.setText("02.");

        labelAnswer3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelAnswer3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelAnswer3.setText("03.");

        labelAnswer4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelAnswer4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelAnswer4.setText("04.");

        labelAnswer5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelAnswer5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelAnswer5.setText("05.");

        labelAnswer6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelAnswer6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelAnswer6.setText("06.");

        labelAnswer7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelAnswer7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelAnswer7.setText("07.");

        labelAnswer8.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelAnswer8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelAnswer8.setText("08.");

        labelAnswer9.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelAnswer9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelAnswer9.setText("09.");

        labelAnswer10.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelAnswer10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelAnswer10.setText("10.");

        buttonGroup2.add(radioButton2a);

        buttonGroup3.add(radioButton3a);

        buttonGroup4.add(radioButton4a);

        buttonGroup5.add(radioButton5a);

        buttonGroup6.add(radioButton6a);

        buttonGroup7.add(radioButton7a);

        buttonGroup8.add(radioButton8a);

        buttonGroup9.add(radioButton9a);

        buttonGroup10.add(radioButton10a);

        buttonGroup2.add(radioButton2b);

        buttonGroup2.add(radioButton2c);

        buttonGroup2.add(radioButton2d);

        buttonGroup3.add(radioButton3b);

        buttonGroup3.add(radioButton3c);

        buttonGroup3.add(radioButton3d);

        buttonGroup4.add(radioButton4b);

        buttonGroup4.add(radioButton4c);

        buttonGroup4.add(radioButton4d);

        buttonGroup5.add(radioButton5b);

        buttonGroup5.add(radioButton5c);

        buttonGroup5.add(radioButton5d);

        buttonGroup6.add(radioButton6b);

        buttonGroup6.add(radioButton6c);

        buttonGroup6.add(radioButton6d);

        buttonGroup7.add(radioButton7b);

        buttonGroup7.add(radioButton7c);
        radioButton7c.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButton7cActionPerformed(evt);
            }
        });

        buttonGroup7.add(radioButton7d);
        radioButton7d.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButton7dActionPerformed(evt);
            }
        });

        buttonGroup8.add(radioButton8b);
        radioButton8b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButton8bActionPerformed(evt);
            }
        });

        buttonGroup8.add(radioButton8c);

        buttonGroup8.add(radioButton8d);

        buttonGroup9.add(radioButton9b);

        buttonGroup9.add(radioButton9c);

        buttonGroup9.add(radioButton9d);
        radioButton9d.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButton9dActionPerformed(evt);
            }
        });

        buttonGroup10.add(radioButton10b);
        radioButton10b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButton10bActionPerformed(evt);
            }
        });

        buttonGroup10.add(radioButton10c);

        buttonGroup10.add(radioButton10d);
        radioButton10d.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButton10dActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAnswerLayout = new javax.swing.GroupLayout(panelAnswer);
        panelAnswer.setLayout(panelAnswerLayout);
        panelAnswerLayout.setHorizontalGroup(
            panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAnswerLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelA, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAnswerLayout.createSequentialGroup()
                        .addGroup(panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelAnswer1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelAnswer3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelAnswer2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelAnswer4, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelAnswer5, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelAnswer6, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelAnswer7, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelAnswer8, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelAnswer9, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelAnswer10, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioButton2a, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton3a, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton4a, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton5a, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton6a, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton7a, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton8a, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton9a, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton10a, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton1a, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGroup(panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAnswerLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(labelB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAnswerLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioButton1b, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton2b, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton3b, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton5b, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton6b, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton7b, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton8b, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton9b, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton10b, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton4b, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGroup(panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAnswerLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(labelC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAnswerLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioButton1c, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton2c, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton3c, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton4c, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton5c, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton6c, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton7c, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton8c, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton9c, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton10c, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGroup(panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAnswerLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(labelD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAnswerLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioButton1d, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton2d, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton3d, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton4d, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton5d, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton6d, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton7d, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton8d, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton9d, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton10d, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(52, 52, 52))
        );
        panelAnswerLayout.setVerticalGroup(
            panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAnswerLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelA)
                    .addComponent(labelB)
                    .addComponent(labelC)
                    .addComponent(labelD))
                .addGap(31, 31, 31)
                .addGroup(panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(radioButton1d)
                    .addComponent(radioButton1c)
                    .addComponent(radioButton1b)
                    .addComponent(radioButton1a)
                    .addComponent(labelAnswer1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelAnswer2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radioButton2a)
                    .addComponent(radioButton2b)
                    .addComponent(radioButton2c)
                    .addComponent(radioButton2d))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelAnswer3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radioButton3a)
                    .addComponent(radioButton3b)
                    .addComponent(radioButton3c)
                    .addComponent(radioButton3d))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelAnswer4, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radioButton4a)
                    .addComponent(radioButton4b)
                    .addComponent(radioButton4c)
                    .addComponent(radioButton4d))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAnswerLayout.createSequentialGroup()
                        .addGroup(panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelAnswer5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radioButton5b)
                            .addComponent(radioButton5c)
                            .addComponent(radioButton5d))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelAnswer6, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radioButton6a)
                            .addComponent(radioButton6b)
                            .addComponent(radioButton6c)
                            .addComponent(radioButton6d))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelAnswer7, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radioButton7a)
                            .addComponent(radioButton7b)
                            .addComponent(radioButton7c)
                            .addComponent(radioButton7d))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelAnswer8, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radioButton8a)
                            .addComponent(radioButton8b)
                            .addComponent(radioButton8c)
                            .addComponent(radioButton8d))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelAnswer9, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radioButton9a)
                            .addComponent(radioButton9b)
                            .addComponent(radioButton9c)
                            .addComponent(radioButton9d))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioButton10b, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton10c, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radioButton10d, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelAnswer10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radioButton10a, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(radioButton5a))
                .addContainerGap(187, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelBackGroundLayout = new javax.swing.GroupLayout(panelBackGround);
        panelBackGround.setLayout(panelBackGroundLayout);
        panelBackGroundLayout.setHorizontalGroup(
            panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBackGroundLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelSubject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelExamId, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textExamId, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBackGroundLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(labelStudentId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(45, 45, 45))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBackGroundLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelStudentName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(textStudentName, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                    .addComponent(textStudentId))
                .addGap(57, 57, 57)
                .addComponent(labelFinish, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(331, 331, 331))
            .addGroup(panelBackGroundLayout.createSequentialGroup()
                .addComponent(panelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(panelBackGroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 1348, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelBackGroundLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 997, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelAnswer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelBackGroundLayout.setVerticalGroup(
            panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBackGroundLayout.createSequentialGroup()
                .addComponent(panelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelExamId)
                    .addComponent(textExamId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelStudentId)
                    .addComponent(textStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBackGroundLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labelSubject)
                                .addComponent(textSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labelStudentName)
                                .addComponent(textStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(14, 14, 14)
                        .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelBackGroundLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(labelFinish)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelAnswer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackGround, javax.swing.GroupLayout.PREFERRED_SIZE, 1373, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radioButton10dActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButton10dActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioButton10dActionPerformed

    private void radioButton9dActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButton9dActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioButton9dActionPerformed

    private void radioButton8bActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButton8bActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioButton8bActionPerformed

    private void radioButton7cActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButton7cActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioButton7cActionPerformed

    private void radioButton10bActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButton10bActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioButton10bActionPerformed

    private void radioButton7dActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButton7dActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioButton7dActionPerformed

    private void labelExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelExitMouseClicked
        System.exit(0);
    }//GEN-LAST:event_labelExitMouseClicked

    private void labelBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelBackMouseClicked
        ExamRegistrationForm examRegistrationForm = new ExamRegistrationForm();
        String examId = textExamId.getText();
        String studentId = textStudentId.getText();
        String studentName = textStudentName.getText();
        String subject = textSubject.getText();
        examRegistrationForm.setTextValue(examId, studentId, studentName, subject);
        examRegistrationForm.setVisible(true);
        dispose();
    }//GEN-LAST:event_labelBackMouseClicked

    private void labelFinishMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelFinishMouseClicked
        getQuestions();
        int marks = calculateTotalMarks();
        String examId = textExamId.getText();
        String studentId = textStudentId.getText();
        String studentName = textStudentName.getText();
        ResultForm resultForm = new ResultForm();
        resultForm.setTextValue(examId, studentId, studentName, marks);
        resultForm.setVisible(true);
        writeMarksFile();
    }//GEN-LAST:event_labelFinishMouseClicked

    private void labelMinimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelMinimizeMouseClicked
        setState(ICONIFIED);
    }//GEN-LAST:event_labelMinimizeMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExamForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExamForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExamForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExamForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExamForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup10;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private javax.swing.ButtonGroup buttonGroup8;
    private javax.swing.ButtonGroup buttonGroup9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelA;
    private javax.swing.JLabel labelAnswer1;
    private javax.swing.JLabel labelAnswer10;
    private javax.swing.JLabel labelAnswer2;
    private javax.swing.JLabel labelAnswer3;
    private javax.swing.JLabel labelAnswer4;
    private javax.swing.JLabel labelAnswer5;
    private javax.swing.JLabel labelAnswer6;
    private javax.swing.JLabel labelAnswer7;
    private javax.swing.JLabel labelAnswer8;
    private javax.swing.JLabel labelAnswer9;
    private javax.swing.JLabel labelB;
    private javax.swing.JLabel labelBack;
    private javax.swing.JLabel labelC;
    private javax.swing.JLabel labelD;
    private javax.swing.JLabel labelDate;
    private javax.swing.JLabel labelExamId;
    private javax.swing.JLabel labelExit;
    private javax.swing.JLabel labelFinish;
    private javax.swing.JLabel labelMinimize;
    private javax.swing.JLabel labelStudentId;
    private javax.swing.JLabel labelStudentName;
    private javax.swing.JLabel labelSubject;
    private javax.swing.JLabel labelTime;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JPanel panelAnswer;
    private javax.swing.JPanel panelBackGround;
    private javax.swing.JPanel panelTitle;
    private javax.swing.JRadioButton radioButton10a;
    private javax.swing.JRadioButton radioButton10b;
    private javax.swing.JRadioButton radioButton10c;
    private javax.swing.JRadioButton radioButton10d;
    private javax.swing.JRadioButton radioButton1a;
    private javax.swing.JRadioButton radioButton1b;
    private javax.swing.JRadioButton radioButton1c;
    private javax.swing.JRadioButton radioButton1d;
    private javax.swing.JRadioButton radioButton2a;
    private javax.swing.JRadioButton radioButton2b;
    private javax.swing.JRadioButton radioButton2c;
    private javax.swing.JRadioButton radioButton2d;
    private javax.swing.JRadioButton radioButton3a;
    private javax.swing.JRadioButton radioButton3b;
    private javax.swing.JRadioButton radioButton3c;
    private javax.swing.JRadioButton radioButton3d;
    private javax.swing.JRadioButton radioButton4a;
    private javax.swing.JRadioButton radioButton4b;
    private javax.swing.JRadioButton radioButton4c;
    private javax.swing.JRadioButton radioButton4d;
    private javax.swing.JRadioButton radioButton5a;
    private javax.swing.JRadioButton radioButton5b;
    private javax.swing.JRadioButton radioButton5c;
    private javax.swing.JRadioButton radioButton5d;
    private javax.swing.JRadioButton radioButton6a;
    private javax.swing.JRadioButton radioButton6b;
    private javax.swing.JRadioButton radioButton6c;
    private javax.swing.JRadioButton radioButton6d;
    private javax.swing.JRadioButton radioButton7a;
    private javax.swing.JRadioButton radioButton7b;
    private javax.swing.JRadioButton radioButton7c;
    private javax.swing.JRadioButton radioButton7d;
    private javax.swing.JRadioButton radioButton8a;
    private javax.swing.JRadioButton radioButton8b;
    private javax.swing.JRadioButton radioButton8c;
    private javax.swing.JRadioButton radioButton8d;
    private javax.swing.JRadioButton radioButton9a;
    private javax.swing.JRadioButton radioButton9b;
    private javax.swing.JRadioButton radioButton9c;
    private javax.swing.JRadioButton radioButton9d;
    private javax.swing.JSeparator separator;
    private javax.swing.JTextArea textAreaExam;
    private javax.swing.JTextField textExamId;
    private javax.swing.JTextField textStudentId;
    private javax.swing.JTextField textStudentName;
    private javax.swing.JTextField textSubject;
    // End of variables declaration//GEN-END:variables

    void setTextValue(String examId, String studentId, String studentName, String subject) {
        textExamId.setText(examId);
        textStudentId.setText(studentId);
        textStudentName.setText(studentName);
        textSubject.setText(subject);
        searchSubjectId(subject, examId);
    }

    private void searchSubjectId(String subject, String examId) {
        try {
            SubjectContoller subjectContoller = ServerConnector.getServerConnector().getSubjectContoller();
            SubjectDTO subjectDTO = subjectContoller.searchByNameSubject(subject);
            String subjectId = subjectDTO.getSubjectId();
            loadQuestion(subjectId, examId);
        } catch (NotBoundException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadQuestion(String subjectId, String examId) {

        try {
            QuestionController questionController = ServerConnector.getServerConnector().getQuestionController();
            questionDTOList = questionController.getQuestion(subjectId);
            int index = 1;
            for (QuestionDTO questionDTO : questionDTOList) {
                textAreaExam.append(index + ". " + questionDTO.getQuestion() + "\nA. " + questionDTO.getOptionOne() + "\nB. " + questionDTO.getOptionTwo() + "\nC. " + questionDTO.getOptionThree() + "\nD. " + questionDTO.getOptionFour() + "\n\n");
                time += questionDTO.getTime();
                writeExamDetail(examId, questionDTO.getQuestionId());
                index += 1;
            }
            //getTime();
            TimeShedular timeShedular = new TimeShedular(time, this);
            String date = getDate();
            writeExamFile(date);
        } catch (NotBoundException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void writeExamDetail(String examId, String questionId) {
        try {
            ExamDetailController examDetailController = ServerConnector.getServerConnector().getExamDetailController();
            String examDetailId = examDetailController.generateId();
            ExamDetailDTO examDetailDTO = new ExamDetailDTO(examDetailId, examId, questionId);
            boolean isAdded = examDetailController.add(examDetailDTO);
        } catch (NotBoundException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getQuestions() {
        try {
            ExamDetailController examDetailController = ServerConnector.getServerConnector().getExamDetailController();
            List<String> questionIdList = examDetailController.getQuestionId(textExamId.getText());
            for (String questionId : questionIdList) {
                getAnswer(questionId);
            }
            getOptionNo();
        } catch (NotBoundException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getAnswer(String questionId) {
        try {
            AnswerController answerController = ServerConnector.getServerConnector().getAnswerController();
            AnswerDTO answerDTO = answerController.search(questionId);
            answerDTOList.add(answerDTO);
        } catch (NotBoundException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getOptionNo() {
        total = 0;
        boolean r1a = radioButton1a.isSelected();
        if (r1a) {
            QuestionDTO questionDTO = questionDTOList.get(0);
            AnswerDTO answerDTO = answerDTOList.get(0);
            if (questionDTO.getOptionOne().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
                System.out.println("1 " + total);
            }
        }

        boolean r1b = radioButton1b.isSelected();
        if (r1b) {
            QuestionDTO questionDTO = questionDTOList.get(0);
            AnswerDTO answerDTO = answerDTOList.get(0);
            if (questionDTO.getOptionTwo().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
                System.out.println("2 " + total);
            }
        }

        boolean r1c = radioButton1c.isSelected();
        if (r1c) {
            QuestionDTO questionDTO = questionDTOList.get(0);
            AnswerDTO answerDTO = answerDTOList.get(0);
            if (questionDTO.getOptionThree().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
                System.out.println("3 " + total);
            }
        }

        boolean r1d = radioButton1d.isSelected();
        if (r1d) {
            QuestionDTO questionDTO = questionDTOList.get(0);
            AnswerDTO answerDTO = answerDTOList.get(0);
            if (questionDTO.getOptionFour().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
                System.out.println("4 " + total);
            }
        }

        boolean r2a = radioButton2a.isSelected();
        if (r2a) {
            QuestionDTO questionDTO = questionDTOList.get(1);
            AnswerDTO answerDTO = answerDTOList.get(1);
            if (questionDTO.getOptionOne().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r2b = radioButton2b.isSelected();
        if (r2b) {
            QuestionDTO questionDTO = questionDTOList.get(1);
            AnswerDTO answerDTO = answerDTOList.get(1);
            if (questionDTO.getOptionTwo().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r2c = radioButton2c.isSelected();
        if (r2c) {
            QuestionDTO questionDTO = questionDTOList.get(1);
            AnswerDTO answerDTO = answerDTOList.get(1);
            if (questionDTO.getOptionThree().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r2d = radioButton2d.isSelected();
        if (r2d) {
            QuestionDTO questionDTO = questionDTOList.get(1);
            AnswerDTO answerDTO = answerDTOList.get(1);
            if (questionDTO.getOptionFour().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r3a = radioButton3a.isSelected();
        if (r3a) {
            QuestionDTO questionDTO = questionDTOList.get(2);
            AnswerDTO answerDTO = answerDTOList.get(2);
            if (questionDTO.getOptionOne().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r3b = radioButton3b.isSelected();
        if (r3b) {
            QuestionDTO questionDTO = questionDTOList.get(2);
            AnswerDTO answerDTO = answerDTOList.get(2);
            if (questionDTO.getOptionTwo().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r3c = radioButton3c.isSelected();
        if (r3c) {
            QuestionDTO questionDTO = questionDTOList.get(2);
            AnswerDTO answerDTO = answerDTOList.get(2);
            if (questionDTO.getOptionThree().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r3d = radioButton3d.isSelected();
        if (r3d) {
            QuestionDTO questionDTO = questionDTOList.get(2);
            AnswerDTO answerDTO = answerDTOList.get(2);
            if (questionDTO.getOptionFour().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r4a = radioButton4a.isSelected();
        if (r4a) {
            QuestionDTO questionDTO = questionDTOList.get(3);
            AnswerDTO answerDTO = answerDTOList.get(3);
            if (questionDTO.getOptionOne().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r4b = radioButton4b.isSelected();
        if (r4b) {
            QuestionDTO questionDTO = questionDTOList.get(3);
            AnswerDTO answerDTO = answerDTOList.get(3);
            if (questionDTO.getOptionTwo().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r4c = radioButton4c.isSelected();
        if (r4c) {
            QuestionDTO questionDTO = questionDTOList.get(3);
            AnswerDTO answerDTO = answerDTOList.get(3);
            if (questionDTO.getOptionThree().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r4d = radioButton4d.isSelected();
        if (r4d) {
            QuestionDTO questionDTO = questionDTOList.get(3);
            AnswerDTO answerDTO = answerDTOList.get(3);
            if (questionDTO.getOptionFour().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r5a = radioButton5a.isSelected();
        if (r5a) {
            QuestionDTO questionDTO = questionDTOList.get(4);
            AnswerDTO answerDTO = answerDTOList.get(4);
            if (questionDTO.getOptionOne().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r5b = radioButton5b.isSelected();
        if (r5b) {
            QuestionDTO questionDTO = questionDTOList.get(4);
            AnswerDTO answerDTO = answerDTOList.get(4);
            if (questionDTO.getOptionTwo().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r5c = radioButton5c.isSelected();
        if (r5c) {
            QuestionDTO questionDTO = questionDTOList.get(4);
            AnswerDTO answerDTO = answerDTOList.get(4);
            if (questionDTO.getOptionThree().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r5d = radioButton5d.isSelected();
        if (r5d) {
            QuestionDTO questionDTO = questionDTOList.get(4);
            AnswerDTO answerDTO = answerDTOList.get(4);
            if (questionDTO.getOptionFour().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r6a = radioButton6a.isSelected();
        if (r6a) {
            QuestionDTO questionDTO = questionDTOList.get(5);
            AnswerDTO answerDTO = answerDTOList.get(5);
            if (questionDTO.getOptionOne().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r6b = radioButton6b.isSelected();
        if (r6b) {
            QuestionDTO questionDTO = questionDTOList.get(5);
            AnswerDTO answerDTO = answerDTOList.get(5);
            if (questionDTO.getOptionTwo().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r6c = radioButton6c.isSelected();
        if (r6c) {
            QuestionDTO questionDTO = questionDTOList.get(5);
            AnswerDTO answerDTO = answerDTOList.get(5);
            if (questionDTO.getOptionThree().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r6d = radioButton6d.isSelected();
        if (r6d) {
            QuestionDTO questionDTO = questionDTOList.get(5);
            AnswerDTO answerDTO = answerDTOList.get(5);
            if (questionDTO.getOptionFour().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r7a = radioButton7a.isSelected();
        if (r7a) {
            QuestionDTO questionDTO = questionDTOList.get(6);
            AnswerDTO answerDTO = answerDTOList.get(6);
            if (questionDTO.getOptionOne().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r7b = radioButton7b.isSelected();
        if (r7b) {
            QuestionDTO questionDTO = questionDTOList.get(6);
            AnswerDTO answerDTO = answerDTOList.get(6);
            if (questionDTO.getOptionTwo().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r7c = radioButton7c.isSelected();
        if (r7c) {
            QuestionDTO questionDTO = questionDTOList.get(6);
            AnswerDTO answerDTO = answerDTOList.get(6);
            if (questionDTO.getOptionThree().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r7d = radioButton7d.isSelected();
        if (r7d) {
            QuestionDTO questionDTO = questionDTOList.get(6);
            AnswerDTO answerDTO = answerDTOList.get(6);
            if (questionDTO.getOptionFour().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r8a = radioButton8a.isSelected();
        if (r8a) {
            QuestionDTO questionDTO = questionDTOList.get(7);
            AnswerDTO answerDTO = answerDTOList.get(7);
            if (questionDTO.getOptionOne().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r8b = radioButton8b.isSelected();
        if (r8b) {
            QuestionDTO questionDTO = questionDTOList.get(7);
            AnswerDTO answerDTO = answerDTOList.get(7);
            if (questionDTO.getOptionTwo().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r8c = radioButton8c.isSelected();
        if (r8c) {
            QuestionDTO questionDTO = questionDTOList.get(7);
            AnswerDTO answerDTO = answerDTOList.get(7);
            if (questionDTO.getOptionThree().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r8d = radioButton8d.isSelected();
        if (r8d) {
            QuestionDTO questionDTO = questionDTOList.get(7);
            AnswerDTO answerDTO = answerDTOList.get(7);
            if (questionDTO.getOptionFour().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r9a = radioButton9a.isSelected();
        if (r9a) {
            QuestionDTO questionDTO = questionDTOList.get(8);
            AnswerDTO answerDTO = answerDTOList.get(8);
            if (questionDTO.getOptionOne().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r9b = radioButton9b.isSelected();
        if (r9b) {
            QuestionDTO questionDTO = questionDTOList.get(8);
            AnswerDTO answerDTO = answerDTOList.get(8);
            if (questionDTO.getOptionTwo().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r9c = radioButton9c.isSelected();
        if (r9c) {
            QuestionDTO questionDTO = questionDTOList.get(8);
            AnswerDTO answerDTO = answerDTOList.get(8);
            if (questionDTO.getOptionThree().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r9d = radioButton9d.isSelected();
        if (r9d) {
            QuestionDTO questionDTO = questionDTOList.get(8);
            AnswerDTO answerDTO = answerDTOList.get(8);
            if (questionDTO.getOptionFour().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r10a = radioButton10a.isSelected();
        if (r10a) {
            QuestionDTO questionDTO = questionDTOList.get(9);
            AnswerDTO answerDTO = answerDTOList.get(9);
            if (questionDTO.getOptionOne().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r10b = radioButton10b.isSelected();
        if (r10b) {
            QuestionDTO questionDTO = questionDTOList.get(9);
            AnswerDTO answerDTO = answerDTOList.get(9);
            if (questionDTO.getOptionTwo().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r10c = radioButton10c.isSelected();
        if (r10c) {
            QuestionDTO questionDTO = questionDTOList.get(9);
            AnswerDTO answerDTO = answerDTOList.get(9);
            if (questionDTO.getOptionThree().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }

        boolean r10d = radioButton10d.isSelected();
        if (r10d) {
            QuestionDTO questionDTO = questionDTOList.get(9);
            AnswerDTO answerDTO = answerDTOList.get(9);
            if (questionDTO.getOptionFour().equals(answerDTO.getAnswer())) {
                total += answerDTO.getMarks();
            }
        }
    }

    private int calculateTotalMarks() {
        int totalMarks = 0;
        for (AnswerDTO answerDTO : answerDTOList) {
            totalMarks += answerDTO.getMarks();
        }
        System.out.println("totalMarks" + totalMarks);
        System.out.println("total" + total);
        double marks = (double) total / totalMarks * 100;
        System.out.println("marks" + marks);
        lastMarks = (int) marks;
        System.out.println("lastMarks" + lastMarks);
        return lastMarks;
    }

    private void getTime() {
        //labelTime.setText(Integer.toString(time));
    }

    private String getDate() {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String date = dateFormat.format(new Date());
        labelDate.setText(date);
        return date;
    }

    private void writeExamFile(String date) {
        String examId = textExamId.getText();
        String studentId = textStudentId.getText();
        ExamDTO examDTO = new ExamDTO(examId, studentId, date, Integer.toString(time));
        try {
            ExamController examController = ServerConnector.getServerConnector().getExamController();
            boolean isAdded = examController.add(examDTO);
        } catch (NotBoundException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void writeMarksFile() {
        try {
            MarksController marksController = ServerConnector.getServerConnector().getMarksController();
            String marksId = marksController.generateId();
            MarksDTO marksDTO = new MarksDTO(marksId, textExamId.getText(), lastMarks);
            boolean isAdded = marksController.add(marksDTO);
        } catch (NotBoundException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ExamForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void setTime(int time) {
        if (time != 0) {
            labelTime.setText(Integer.toString(time) + " minute ");
        } else {
            labelTime.setText(Integer.toString(time) + " minute ");
            getQuestions();
            int marks = calculateTotalMarks();
            String examId = textExamId.getText();
            String studentId = textStudentId.getText();
            String studentName = textStudentName.getText();
            ResultForm resultForm = new ResultForm();
            resultForm.setTextValue(examId, studentId, studentName, marks);
            resultForm.setVisible(true);
            writeMarksFile();
        }
    }

}
