/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.examsimulator.client.view;

import com.examsimulator.client.connector.ServerConnector;
import com.examsimulator.common.controller.AnswerController;
import com.examsimulator.common.controller.QuestionController;
import com.examsimulator.common.controller.SubjectContoller;
import com.examsimulator.common.dto.AnswerDTO;
import com.examsimulator.common.dto.QuestionDTO;
import com.examsimulator.common.dto.SubjectDTO;
import com.examsimulator.common.observer.Observer;
import com.examsimulator.common.observer.Subject;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Lahiru Sandeepa
 */
public class DevelopQuestionForm extends javax.swing.JFrame implements Observer {

    private String questionId = "";

    /**
     * Creates new form DevelopQuestionForm
     */
    public DevelopQuestionForm() {
        initComponents();
        try {
            UnicastRemoteObject.exportObject(this, 0);
        } catch (RemoteException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Subject subject = (Subject) ServerConnector.getServerConnector().getSubjectContoller();
            subject.registerObserver(this);
        } catch (NotBoundException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        generateQuestionId();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBackGround = new javax.swing.JPanel();
        panelTitle = new javax.swing.JPanel();
        labelTitle = new javax.swing.JLabel();
        labelBack = new javax.swing.JLabel();
        labelExit = new javax.swing.JLabel();
        labelMinimize = new javax.swing.JLabel();
        labelTestDeveloperName = new javax.swing.JLabel();
        labelSubject = new javax.swing.JLabel();
        labelTestDeveloperName1 = new javax.swing.JLabel();
        textTestDeveloperName = new javax.swing.JTextField();
        textSubject = new javax.swing.JTextField();
        textTestDeveloperId = new javax.swing.JTextField();
        labelQuestionNo = new javax.swing.JLabel();
        textQuestionNo = new javax.swing.JTextField();
        labelQuestion = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaQuestion = new javax.swing.JTextArea();
        separator = new javax.swing.JSeparator();
        labelOption1 = new javax.swing.JLabel();
        textOption1 = new javax.swing.JTextField();
        labelOption2 = new javax.swing.JLabel();
        textOption2 = new javax.swing.JTextField();
        labelOption3 = new javax.swing.JLabel();
        labelOption4 = new javax.swing.JLabel();
        textOption3 = new javax.swing.JTextField();
        textOption4 = new javax.swing.JTextField();
        labelTime = new javax.swing.JLabel();
        textTime = new javax.swing.JTextField();
        labelSaveNewQuestion = new javax.swing.JLabel();
        labelChageQuestion = new javax.swing.JLabel();
        labelRemoveQuestion = new javax.swing.JLabel();
        labelViewQuestion = new javax.swing.JLabel();
        labelAnswer = new javax.swing.JLabel();
        textAnswer = new javax.swing.JTextField();
        labelMarks = new javax.swing.JLabel();
        textMarks = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        panelBackGround.setBackground(new java.awt.Color(255, 255, 255));

        panelTitle.setBackground(new java.awt.Color(153, 0, 102));

        labelTitle.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        labelTitle.setForeground(new java.awt.Color(255, 255, 255));
        labelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTitle.setText("Develop Question Form");

        labelBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/examsimulator/client/image/Entypo_e75e(0)_64.png"))); // NOI18N
        labelBack.setText("jLabel1");
        labelBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelBackMouseClicked(evt);
            }
        });

        labelExit.setBackground(new java.awt.Color(255, 255, 255));
        labelExit.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelExit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelExit.setText("X");
        labelExit.setOpaque(true);
        labelExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelExitMouseClicked(evt);
            }
        });

        labelMinimize.setBackground(new java.awt.Color(255, 255, 255));
        labelMinimize.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelMinimize.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelMinimize.setText("-");
        labelMinimize.setOpaque(true);
        labelMinimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelMinimizeMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelTitleLayout = new javax.swing.GroupLayout(panelTitle);
        panelTitle.setLayout(panelTitleLayout);
        panelTitleLayout.setHorizontalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelBack, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(232, 232, 232)
                .addComponent(labelMinimize, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelExit, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );
        panelTitleLayout.setVerticalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTitleLayout.createSequentialGroup()
                .addGroup(panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTitleLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(labelTitle))
                    .addGroup(panelTitleLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelBack)
                            .addGroup(panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labelMinimize, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelExit, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        labelTestDeveloperName.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelTestDeveloperName.setText("Test Developer Name");

        labelSubject.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelSubject.setText("Subject");

        labelTestDeveloperName1.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelTestDeveloperName1.setText("Test Developer Id");

        textTestDeveloperName.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N

        textSubject.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N

        textTestDeveloperId.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N

        labelQuestionNo.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelQuestionNo.setText("Question No");

        textQuestionNo.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        textQuestionNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textQuestionNoActionPerformed(evt);
            }
        });

        labelQuestion.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelQuestion.setText("Question ");

        textAreaQuestion.setColumns(20);
        textAreaQuestion.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        textAreaQuestion.setRows(5);
        jScrollPane1.setViewportView(textAreaQuestion);

        separator.setForeground(new java.awt.Color(0, 0, 0));

        labelOption1.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelOption1.setText("Option 1");

        textOption1.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        textOption1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textOption1ActionPerformed(evt);
            }
        });

        labelOption2.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelOption2.setText("Option 2");

        textOption2.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        textOption2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textOption2ActionPerformed(evt);
            }
        });

        labelOption3.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelOption3.setText("Option 3");

        labelOption4.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelOption4.setText("Option 4");

        textOption3.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        textOption3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textOption3ActionPerformed(evt);
            }
        });

        textOption4.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        textOption4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textOption4ActionPerformed(evt);
            }
        });

        labelTime.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelTime.setText("Time (minute)");

        textTime.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N

        labelSaveNewQuestion.setBackground(new java.awt.Color(0, 0, 204));
        labelSaveNewQuestion.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        labelSaveNewQuestion.setForeground(new java.awt.Color(255, 255, 255));
        labelSaveNewQuestion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelSaveNewQuestion.setText("Save New Question");
        labelSaveNewQuestion.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        labelSaveNewQuestion.setOpaque(true);
        labelSaveNewQuestion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelSaveNewQuestionMouseClicked(evt);
            }
        });

        labelChageQuestion.setBackground(new java.awt.Color(0, 0, 204));
        labelChageQuestion.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        labelChageQuestion.setForeground(new java.awt.Color(255, 255, 255));
        labelChageQuestion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelChageQuestion.setText("Change Question");
        labelChageQuestion.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        labelChageQuestion.setOpaque(true);
        labelChageQuestion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelChageQuestionMouseClicked(evt);
            }
        });

        labelRemoveQuestion.setBackground(new java.awt.Color(0, 0, 204));
        labelRemoveQuestion.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        labelRemoveQuestion.setForeground(new java.awt.Color(255, 255, 255));
        labelRemoveQuestion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelRemoveQuestion.setText("Remove Question");
        labelRemoveQuestion.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        labelRemoveQuestion.setOpaque(true);
        labelRemoveQuestion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelRemoveQuestionMouseClicked(evt);
            }
        });

        labelViewQuestion.setBackground(new java.awt.Color(0, 0, 204));
        labelViewQuestion.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        labelViewQuestion.setForeground(new java.awt.Color(255, 255, 255));
        labelViewQuestion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelViewQuestion.setText("View Question");
        labelViewQuestion.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        labelViewQuestion.setOpaque(true);
        labelViewQuestion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelViewQuestionMouseClicked(evt);
            }
        });

        labelAnswer.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelAnswer.setText("Answer");

        textAnswer.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        textAnswer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textAnswerActionPerformed(evt);
            }
        });

        labelMarks.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelMarks.setText("Marks");

        textMarks.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        textMarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textMarksActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBackGroundLayout = new javax.swing.GroupLayout(panelBackGround);
        panelBackGround.setLayout(panelBackGroundLayout);
        panelBackGroundLayout.setHorizontalGroup(
            panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelBackGroundLayout.createSequentialGroup()
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBackGroundLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(separator))
                    .addGroup(panelBackGroundLayout.createSequentialGroup()
                        .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelBackGroundLayout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelBackGroundLayout.createSequentialGroup()
                                        .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(labelSubject, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(labelTestDeveloperName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(panelBackGroundLayout.createSequentialGroup()
                                                .addComponent(textTestDeveloperName, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(78, 78, 78)
                                                .addComponent(labelTestDeveloperName1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(textTestDeveloperId, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(textSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(panelBackGroundLayout.createSequentialGroup()
                                        .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(labelQuestion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(labelQuestionNo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(labelOption1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(labelOption2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(labelOption3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(labelOption4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(labelTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                                            .addComponent(labelAnswer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(labelMarks, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(textQuestionNo, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1106, Short.MAX_VALUE)
                                            .addComponent(textOption1)
                                            .addComponent(textOption2)
                                            .addComponent(textOption3)
                                            .addComponent(textOption4)
                                            .addComponent(textTime, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(textAnswer)
                                            .addComponent(textMarks, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(panelBackGroundLayout.createSequentialGroup()
                                .addGap(244, 244, 244)
                                .addComponent(labelSaveNewQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelChageQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelRemoveQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelViewQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 25, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelBackGroundLayout.setVerticalGroup(
            panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBackGroundLayout.createSequentialGroup()
                .addComponent(panelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTestDeveloperName)
                    .addComponent(textTestDeveloperName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTestDeveloperName1)
                    .addComponent(textTestDeveloperId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSubject)
                    .addComponent(textSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelQuestionNo)
                    .addComponent(textQuestionNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelQuestion)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelOption1)
                    .addComponent(textOption1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelOption2)
                    .addComponent(textOption2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelOption3)
                    .addComponent(textOption3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelOption4)
                    .addComponent(textOption4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelAnswer)
                    .addComponent(textAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelMarks)
                    .addComponent(textMarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTime)
                    .addComponent(textTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSaveNewQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelChageQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelRemoveQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelViewQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(73, 73, 73))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void labelBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelBackMouseClicked
        new TestDeveloperMainForm().setVisible(true);
        dispose();
        try {
            Subject subject = (Subject) ServerConnector.getServerConnector().getSubjectContoller();
            subject.unregisterObserver(this);
        } catch (NotBoundException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            QuestionController questionController=ServerConnector.getServerConnector().getQuestionController();
            questionController.releaseQuestion(textQuestionNo.getText());
        } catch (NotBoundException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_labelBackMouseClicked

    private void labelSaveNewQuestionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelSaveNewQuestionMouseClicked
        addNewQuestion();
    }//GEN-LAST:event_labelSaveNewQuestionMouseClicked

    private void textQuestionNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textQuestionNoActionPerformed
        searchQuestion();
    }//GEN-LAST:event_textQuestionNoActionPerformed

    private void labelChageQuestionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelChageQuestionMouseClicked
        modifyQuestion();
    }//GEN-LAST:event_labelChageQuestionMouseClicked

    private void labelRemoveQuestionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelRemoveQuestionMouseClicked
        removeQuestion();
    }//GEN-LAST:event_labelRemoveQuestionMouseClicked

    private void labelExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelExitMouseClicked
        System.exit(0);
        try {
            QuestionController questionController=ServerConnector.getServerConnector().getQuestionController();
            questionController.releaseQuestion(textQuestionNo.getText());
        } catch (NotBoundException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_labelExitMouseClicked

    private void labelViewQuestionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelViewQuestionMouseClicked
        AllQuestionForm allQuestionForm = new AllQuestionForm();
        allQuestionForm.setVisible(true);
        allQuestionForm.setTextValues(textTestDeveloperName.getText(), textTestDeveloperId.getText(), textSubject.getText());
        dispose();
    }//GEN-LAST:event_labelViewQuestionMouseClicked

    private void labelMinimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelMinimizeMouseClicked
        setState(ICONIFIED);
    }//GEN-LAST:event_labelMinimizeMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            Subject subject = (Subject) ServerConnector.getServerConnector().getSubjectContoller();
            subject.unregisterObserver(this);
        } catch (NotBoundException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    private void textOption1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textOption1ActionPerformed
        textOption2.requestFocus();
    }//GEN-LAST:event_textOption1ActionPerformed

    private void textOption2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textOption2ActionPerformed
        textOption3.requestFocus();
    }//GEN-LAST:event_textOption2ActionPerformed

    private void textOption3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textOption3ActionPerformed
        textOption4.requestFocus();
    }//GEN-LAST:event_textOption3ActionPerformed

    private void textOption4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textOption4ActionPerformed
        textAnswer.requestFocus();
    }//GEN-LAST:event_textOption4ActionPerformed

    private void textAnswerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textAnswerActionPerformed
        textMarks.requestFocus();
    }//GEN-LAST:event_textAnswerActionPerformed

    private void textMarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textMarksActionPerformed
        textTime.requestFocus();
    }//GEN-LAST:event_textMarksActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DevelopQuestionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DevelopQuestionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DevelopQuestionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DevelopQuestionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DevelopQuestionForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelAnswer;
    private javax.swing.JLabel labelBack;
    private javax.swing.JLabel labelChageQuestion;
    private javax.swing.JLabel labelExit;
    private javax.swing.JLabel labelMarks;
    private javax.swing.JLabel labelMinimize;
    private javax.swing.JLabel labelOption1;
    private javax.swing.JLabel labelOption2;
    private javax.swing.JLabel labelOption3;
    private javax.swing.JLabel labelOption4;
    private javax.swing.JLabel labelQuestion;
    private javax.swing.JLabel labelQuestionNo;
    private javax.swing.JLabel labelRemoveQuestion;
    private javax.swing.JLabel labelSaveNewQuestion;
    private javax.swing.JLabel labelSubject;
    private javax.swing.JLabel labelTestDeveloperName;
    private javax.swing.JLabel labelTestDeveloperName1;
    private javax.swing.JLabel labelTime;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JLabel labelViewQuestion;
    private javax.swing.JPanel panelBackGround;
    private javax.swing.JPanel panelTitle;
    private javax.swing.JSeparator separator;
    private javax.swing.JTextField textAnswer;
    private javax.swing.JTextArea textAreaQuestion;
    private javax.swing.JTextField textMarks;
    private javax.swing.JTextField textOption1;
    private javax.swing.JTextField textOption2;
    private javax.swing.JTextField textOption3;
    private javax.swing.JTextField textOption4;
    private javax.swing.JTextField textQuestionNo;
    private javax.swing.JTextField textSubject;
    private javax.swing.JTextField textTestDeveloperId;
    private javax.swing.JTextField textTestDeveloperName;
    private javax.swing.JTextField textTime;
    // End of variables declaration//GEN-END:variables

    void setTextValues(String testDeveloperName, String testDeveloperId, String subject) {
        textTestDeveloperName.setText(testDeveloperName);
        textTestDeveloperId.setText(testDeveloperId);
        textSubject.setText(subject);
    }

    private void addNewQuestion() {
        String questionId = textQuestionNo.getText();
        String subjectId = searchSubject();
        String testDeveloperId = textTestDeveloperId.getText();
        String question = textAreaQuestion.getText();
        String optionOne = textOption1.getText();
        String optionTwo = textOption2.getText();
        String optionThree = textOption3.getText();
        String optionFour = textOption4.getText();
        int time = Integer.parseInt(textTime.getText());
        QuestionDTO questionDTO = new QuestionDTO(questionId, subjectId, testDeveloperId, question, optionOne, optionTwo, optionThree, optionFour, time);
        try {
            QuestionController questionController = ServerConnector.getServerConnector().getQuestionController();
            boolean isAdded = questionController.add(questionDTO);
            if (isAdded) {
                addAnswer();
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String searchSubject() {
        String subject = textSubject.getText();
        try {
            SubjectContoller subjectContoller = ServerConnector.getServerConnector().getSubjectContoller();
            SubjectDTO subjectDTO = subjectContoller.searchByNameSubject(subject);
            if (subjectDTO != null) {
                return subjectDTO.getSubjectId();
            } else {
                JOptionPane.showMessageDialog(this, "Subject Name is incorrect!");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    private void addAnswer() {
        String questionId = textQuestionNo.getText();
        String answer = textAnswer.getText();
        int marks = Integer.parseInt(textMarks.getText());
        String id = generateAnswerId();
        AnswerDTO answerDTO = new AnswerDTO(id, questionId, answer, marks);
        try {
            AnswerController answerController = ServerConnector.getServerConnector().getAnswerController();
            try {
                boolean isAdded = answerController.add(answerDTO);
                if (isAdded) {
                    JOptionPane.showMessageDialog(this, "New question is added success!");
                }
            } catch (IOException ex) {
                Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchQuestion() {
        String questionId = textQuestionNo.getText();

        try {
            QuestionController questionController = ServerConnector.getServerConnector().getQuestionController();
            if (this.questionId != questionId) {
                questionController.releaseQuestion(this.questionId);
            }
            this.questionId = questionId;
            QuestionDTO questionDTO = questionController.search(questionId);
            if (questionDTO != null) {
                if (questionController.reserveQuestion(questionId)) {
                    textAreaQuestion.setText(questionDTO.getQuestion());
                    textOption1.setText(questionDTO.getOptionOne());
                    textOption2.setText(questionDTO.getOptionTwo());
                    textOption3.setText(questionDTO.getOptionThree());
                    textOption4.setText(questionDTO.getOptionFour());
                    textTime.setText(Integer.toString(questionDTO.getTime()));
                    searchAnswer(questionDTO.getQuestionId());
                } else {
                    JOptionPane.showMessageDialog(this, questionId + " is already reserved!");
                    textAreaQuestion.setText("");
                    textOption1.setText("");
                    textOption2.setText("");
                    textOption3.setText("");
                    textOption4.setText("");
                    textTime.setText("");
                    textAnswer.setText("");
                    textMarks.setText("");
                }
            } else {
                textAreaQuestion.requestFocus();
                textAreaQuestion.setText("");
                textOption1.setText("");
                textOption2.setText("");
                textOption3.setText("");
                textOption4.setText("");
                textTime.setText("");
                textAnswer.setText("");
                textMarks.setText("");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchAnswer(String questionId) {
        try {
            AnswerController answerController = ServerConnector.getServerConnector().getAnswerController();
            AnswerDTO answerDTO = answerController.search(questionId);
            if (answerDTO != null) {
                textAnswer.setText(answerDTO.getAnswer());
                textMarks.setText(Integer.toString(answerDTO.getMarks()));
            } else {
                textAnswer.setText("");
                textMarks.setText("");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void modifyQuestion() {
        String questionId = textQuestionNo.getText();
        String subjectId = searchSubject();
        String testDeveloperId = textTestDeveloperId.getText();
        String question = textAreaQuestion.getText();
        String optionOne = textOption1.getText();
        String optionTwo = textOption2.getText();
        String optionThree = textOption3.getText();
        String optionFour = textOption4.getText();
        int time = Integer.parseInt(textTime.getText());
        QuestionDTO questionDTO = new QuestionDTO(questionId, subjectId, testDeveloperId, question, optionOne, optionTwo, optionThree, optionFour, time);
        try {
            QuestionController questionController = ServerConnector.getServerConnector().getQuestionController();
            boolean isAdded = questionController.modifyQuestion(questionDTO);
            if (isAdded) {
                modifyAnswer();
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            try {
                QuestionController questionController=ServerConnector.getServerConnector().getQuestionController();
                questionController.releaseQuestion(questionId);
            } catch (NotBoundException ex) {
                Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    private void removeQuestion() {
        String questionId = textQuestionNo.getText();
        try {
            QuestionController questionController = ServerConnector.getServerConnector().getQuestionController();
            boolean isRemove = questionController.delete(questionId);
            if (isRemove) {
                removeAnswer();
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void modifyAnswer() {
        String questionId = textQuestionNo.getText();
        String answer = textAnswer.getText();
        int marks = Integer.parseInt(textMarks.getText());
        String id = generateAnswerId();
        AnswerDTO answerDTO = new AnswerDTO(id, questionId, answer, marks);
        try {
            AnswerController answerController = ServerConnector.getServerConnector().getAnswerController();
            try {
                boolean isModify = answerController.modifyAnswer(answerDTO);
                if (isModify) {
                    JOptionPane.showMessageDialog(this, "Question is updated success!");
                }
            } catch (IOException ex) {
                Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void removeAnswer() {
        String questionId = textQuestionNo.getText();
        try {
            AnswerController answerController = ServerConnector.getServerConnector().getAnswerController();
            boolean isRemove = answerController.delete(questionId);
            if (isRemove) {
                JOptionPane.showMessageDialog(this, "Question is removed success!");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String generateAnswerId() {
        try {
            AnswerController answerController = ServerConnector.getServerConnector().getAnswerController();
            String id = answerController.generateId();
            return id;
        } catch (NotBoundException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    @Override
    public void update(String message) throws RemoteException {
        JOptionPane.showMessageDialog(this, message);
    }

    private void generateQuestionId() {
        try {
            QuestionController questionController=ServerConnector.getServerConnector().getQuestionController();
            String id=questionController.generateId();
            textQuestionNo.setText(id);
        } catch (NotBoundException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DevelopQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
