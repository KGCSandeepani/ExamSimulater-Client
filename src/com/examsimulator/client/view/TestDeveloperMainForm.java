/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.examsimulator.client.view;

import com.examsimulator.client.connector.ServerConnector;
import com.examsimulator.common.controller.SubjectContoller;
import com.examsimulator.common.controller.TestDeveloperController;
import com.examsimulator.common.dto.SubjectDTO;
import com.examsimulator.common.dto.TestDeveloperDTO;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Lahiru Sandeepa
 */
public class TestDeveloperMainForm extends javax.swing.JFrame {

    /**
     * Creates new form TestDeveloperMainForm
     */
    public TestDeveloperMainForm() {
        initComponents();
        setTime();
        setDate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBackGround = new javax.swing.JPanel();
        labelTestDeveloperName = new javax.swing.JLabel();
        labelTestDeveloperId = new javax.swing.JLabel();
        lableSubject = new javax.swing.JLabel();
        textTestDeveloperName = new javax.swing.JTextField();
        textTestDeveloperId = new javax.swing.JTextField();
        textSubject = new javax.swing.JTextField();
        labelDevelopQuestion = new javax.swing.JLabel();
        panelTitle = new javax.swing.JPanel();
        labelTitle = new javax.swing.JLabel();
        labelExit = new javax.swing.JLabel();
        labelMinimize = new javax.swing.JLabel();
        labelTime = new javax.swing.JLabel();
        labelDate = new javax.swing.JLabel();
        labelViewQuestion = new javax.swing.JLabel();
        labelSetting = new javax.swing.JLabel();
        labelRestart = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        panelBackGround.setBackground(new java.awt.Color(255, 255, 255));

        labelTestDeveloperName.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelTestDeveloperName.setText("Test Developer Name");

        labelTestDeveloperId.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelTestDeveloperId.setText("Test Developer Id");

        lableSubject.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        lableSubject.setText("Subject");

        textTestDeveloperName.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        textTestDeveloperName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textTestDeveloperNameActionPerformed(evt);
            }
        });
        textTestDeveloperName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textTestDeveloperNameKeyReleased(evt);
            }
        });

        textTestDeveloperId.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        textTestDeveloperId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textTestDeveloperIdActionPerformed(evt);
            }
        });

        textSubject.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        textSubject.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textSubjectKeyReleased(evt);
            }
        });

        labelDevelopQuestion.setBackground(new java.awt.Color(0, 0, 204));
        labelDevelopQuestion.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        labelDevelopQuestion.setForeground(new java.awt.Color(255, 255, 255));
        labelDevelopQuestion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelDevelopQuestion.setText("Develop Question");
        labelDevelopQuestion.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        labelDevelopQuestion.setOpaque(true);
        labelDevelopQuestion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelDevelopQuestionMouseClicked(evt);
            }
        });

        panelTitle.setBackground(new java.awt.Color(153, 0, 102));

        labelTitle.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        labelTitle.setForeground(new java.awt.Color(255, 255, 255));
        labelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTitle.setText("Test Developer Main Form");

        labelExit.setBackground(new java.awt.Color(255, 255, 255));
        labelExit.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        labelExit.setForeground(new java.awt.Color(255, 0, 0));
        labelExit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelExit.setText("X");
        labelExit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelExit.setOpaque(true);
        labelExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelExitMouseClicked(evt);
            }
        });

        labelMinimize.setBackground(new java.awt.Color(255, 255, 255));
        labelMinimize.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        labelMinimize.setForeground(new java.awt.Color(255, 0, 0));
        labelMinimize.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelMinimize.setText("-");
        labelMinimize.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelMinimize.setOpaque(true);
        labelMinimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelMinimizeMouseClicked(evt);
            }
        });

        labelTime.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        labelTime.setText("jLabel1");

        labelDate.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        labelDate.setText("jLabel1");

        javax.swing.GroupLayout panelTitleLayout = new javax.swing.GroupLayout(panelTitle);
        panelTitle.setLayout(panelTitleLayout);
        panelTitleLayout.setHorizontalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTitleLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(labelMinimize, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelExit, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTitleLayout.createSequentialGroup()
                .addContainerGap(446, Short.MAX_VALUE)
                .addComponent(labelTitle)
                .addGroup(panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTitleLayout.createSequentialGroup()
                        .addGap(227, 227, 227)
                        .addComponent(labelTime, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelTitleLayout.createSequentialGroup()
                        .addGap(229, 229, 229)
                        .addComponent(labelDate, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
        );
        panelTitleLayout.setVerticalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTitleLayout.createSequentialGroup()
                .addGroup(panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelExit)
                    .addComponent(labelMinimize))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTitleLayout.createSequentialGroup()
                        .addComponent(labelTitle)
                        .addGap(35, 35, 35))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTitleLayout.createSequentialGroup()
                        .addComponent(labelTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelDate)
                        .addGap(22, 22, 22))))
        );

        labelViewQuestion.setBackground(new java.awt.Color(0, 0, 204));
        labelViewQuestion.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        labelViewQuestion.setForeground(new java.awt.Color(255, 255, 255));
        labelViewQuestion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelViewQuestion.setText("View Question");
        labelViewQuestion.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        labelViewQuestion.setOpaque(true);
        labelViewQuestion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelViewQuestionMouseClicked(evt);
            }
        });

        labelSetting.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        labelSetting.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelSetting.setText("Setting");
        labelSetting.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 0, 0)));

        labelRestart.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        labelRestart.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelRestart.setText("Restart");
        labelRestart.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 0, 0)));
        labelRestart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelRestartMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelBackGroundLayout = new javax.swing.GroupLayout(panelBackGround);
        panelBackGround.setLayout(panelBackGroundLayout);
        panelBackGroundLayout.setHorizontalGroup(
            panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBackGroundLayout.createSequentialGroup()
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelBackGroundLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelSetting, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelRestart, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelBackGroundLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(panelBackGroundLayout.createSequentialGroup()
                                .addComponent(lableSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textSubject))
                            .addGroup(panelBackGroundLayout.createSequentialGroup()
                                .addComponent(labelTestDeveloperId, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textTestDeveloperId))
                            .addGroup(panelBackGroundLayout.createSequentialGroup()
                                .addComponent(labelTestDeveloperName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textTestDeveloperName, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 257, Short.MAX_VALUE)
                        .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelDevelopQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelViewQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(45, 45, 45))
        );
        panelBackGroundLayout.setVerticalGroup(
            panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBackGroundLayout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addComponent(labelDevelopQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelViewQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 435, Short.MAX_VALUE)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSetting, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelRestart, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
            .addGroup(panelBackGroundLayout.createSequentialGroup()
                .addComponent(panelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textTestDeveloperName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTestDeveloperName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textTestDeveloperId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTestDeveloperId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lableSubject)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textTestDeveloperNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textTestDeveloperNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textTestDeveloperNameActionPerformed

    private void labelExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelExitMouseClicked
        System.exit(0);
    }//GEN-LAST:event_labelExitMouseClicked

    private void labelDevelopQuestionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelDevelopQuestionMouseClicked
        if (!(textTestDeveloperName.getText().isEmpty() && textTestDeveloperId.getText().isEmpty() && textSubject.getText().isEmpty())) {
            DevelopQuestionForm developQuestionForm = new DevelopQuestionForm();
            developQuestionForm.setVisible(true);
            String testDeveloperName = textTestDeveloperName.getText();
            String testDeveloperId = textTestDeveloperId.getText();
            String subject = textSubject.getText();
            developQuestionForm.setTextValues(testDeveloperName, testDeveloperId, subject);
            dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Fill all text field!");
        }

    }//GEN-LAST:event_labelDevelopQuestionMouseClicked

    private void labelViewQuestionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelViewQuestionMouseClicked
        if (!(textTestDeveloperName.getText().isEmpty() && textTestDeveloperId.getText().isEmpty() && textSubject.getText().isEmpty())) {
            AllQuestionForm allQuestionForm = new AllQuestionForm();
            allQuestionForm.setVisible(true);
            String testDeveloperName = textTestDeveloperName.getText();
            String testDeveloperId = textTestDeveloperId.getText();
            String subject = textSubject.getText();
            allQuestionForm.setTextValues(testDeveloperName, testDeveloperId, subject);
            dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Fill all text field!");
        }
    }//GEN-LAST:event_labelViewQuestionMouseClicked

    private void textTestDeveloperNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textTestDeveloperNameKeyReleased
        searchTestDeveloperByName();
    }//GEN-LAST:event_textTestDeveloperNameKeyReleased

    private void textTestDeveloperIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textTestDeveloperIdActionPerformed
        searchTestDeveloperById();
    }//GEN-LAST:event_textTestDeveloperIdActionPerformed

    private void textSubjectKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textSubjectKeyReleased
        searchSubject();
    }//GEN-LAST:event_textSubjectKeyReleased

    private void labelRestartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelRestartMouseClicked
        new LoginPage().setVisible(true);
        dispose();
    }//GEN-LAST:event_labelRestartMouseClicked

    private void labelMinimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelMinimizeMouseClicked
        setState(ICONIFIED);
    }//GEN-LAST:event_labelMinimizeMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestDeveloperMainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestDeveloperMainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestDeveloperMainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestDeveloperMainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestDeveloperMainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel labelDate;
    private javax.swing.JLabel labelDevelopQuestion;
    private javax.swing.JLabel labelExit;
    private javax.swing.JLabel labelMinimize;
    private javax.swing.JLabel labelRestart;
    private javax.swing.JLabel labelSetting;
    private javax.swing.JLabel labelTestDeveloperId;
    private javax.swing.JLabel labelTestDeveloperName;
    private javax.swing.JLabel labelTime;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JLabel labelViewQuestion;
    private javax.swing.JLabel lableSubject;
    private javax.swing.JPanel panelBackGround;
    private javax.swing.JPanel panelTitle;
    private javax.swing.JTextField textSubject;
    private javax.swing.JTextField textTestDeveloperId;
    private javax.swing.JTextField textTestDeveloperName;
    // End of variables declaration//GEN-END:variables

    private void searchTestDeveloperByName() {
        String name = textTestDeveloperName.getText();
        int index = name.length();
        try {
            TestDeveloperController testDeveloperController = ServerConnector.getServerConnector().getTestDeveloperController();
            TestDeveloperDTO testDeveloperDTO = testDeveloperController.searchByNameTestDeveloper(name);
            if (testDeveloperDTO != null) {
                textTestDeveloperName.setText(testDeveloperDTO.getTestDeveloperName());
                textTestDeveloperName.select(index, 30);
                textTestDeveloperId.setText(testDeveloperDTO.getTestDeveloperId());
            } else {
                JOptionPane.showMessageDialog(this, "Not found test developer!");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchTestDeveloperById() {
        String id = textTestDeveloperId.getText();
        try {
            TestDeveloperController testDeveloperController = ServerConnector.getServerConnector().getTestDeveloperController();
            TestDeveloperDTO testDeveloperDTO = testDeveloperController.search(id);
            if (testDeveloperDTO != null) {
                textTestDeveloperName.setText(testDeveloperDTO.getTestDeveloperName());
                textSubject.requestFocus();
            } else {
                JOptionPane.showMessageDialog(this, "Not found test developer!");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchSubject() {
        String subject = textSubject.getText();
        int length = subject.length();
        try {
            SubjectContoller subjectContoller = ServerConnector.getServerConnector().getSubjectContoller();
            SubjectDTO subjectDTO = subjectContoller.searchByNameSubject(subject);
            if (subjectDTO != null) {
                textSubject.setText(subjectDTO.getSubjectName());
                textSubject.select(length, subjectDTO.getSubjectName().length());
            } else {
                JOptionPane.showMessageDialog(this, "Subject Name is incorrect!");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setTime() {
        new Thread() {
            public void run() {
                while (true) {
                    SimpleDateFormat dateFormat = new SimpleDateFormat("hh:mm:ss aa");
                    labelTime.setText(dateFormat.format(new Date()));
                }
            }
        }.start();

    }

    private void setDate() {
        SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd");
        String date=dateFormat.format(new Date());
        labelDate.setText(date); 
    }
}
