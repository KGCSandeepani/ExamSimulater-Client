/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.examsimulator.client.view;

import com.examsimulator.client.connector.ServerConnector;
import com.examsimulator.common.controller.AnswerController;
import com.examsimulator.common.controller.QuestionController;
import com.examsimulator.common.controller.SubjectContoller;
import com.examsimulator.common.controller.TestDeveloperController;
import com.examsimulator.common.dto.AnswerDTO;
import com.examsimulator.common.dto.QuestionDTO;
import com.examsimulator.common.dto.SubjectDTO;
import com.examsimulator.common.dto.TestDeveloperDTO;
import com.examsimulator.common.observer.Observer;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Lahiru Sandeepa
 */
public class ViewQuestionForm extends javax.swing.JFrame implements Observer{

    /**
     * Creates new form ViewQuestionForm
     */
    public ViewQuestionForm() {
        initComponents();
        try {
            UnicastRemoteObject.exportObject(this, 0);
        } catch (RemoteException ex) {
            Logger.getLogger(ViewQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
//        try {
//            Subject subject=(Subject) ServerConnector.getServerConnector().getStudentController();
//            subject.registerObserver(viewStudentForm);
//        } catch (NotBoundException ex) {
//            Logger.getLogger(StudentForm.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (MalformedURLException ex) {
//            Logger.getLogger(StudentForm.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (RemoteException ex) {
//            Logger.getLogger(StudentForm.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBackGround = new javax.swing.JPanel();
        panelTitle = new javax.swing.JPanel();
        labelTitle = new javax.swing.JLabel();
        labelBack = new javax.swing.JLabel();
        labelExit = new javax.swing.JLabel();
        labelMinimize = new javax.swing.JLabel();
        labelTestDeveloperName = new javax.swing.JLabel();
        textTestDeveloperName = new javax.swing.JTextField();
        labelSubject = new javax.swing.JLabel();
        textSubject = new javax.swing.JTextField();
        textTestDeveloperId = new javax.swing.JTextField();
        labelTestDeveloperId = new javax.swing.JLabel();
        separator = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaViewQuestion = new javax.swing.JTextArea();
        labelSearch = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        panelBackGround.setBackground(new java.awt.Color(255, 255, 255));

        panelTitle.setBackground(new java.awt.Color(153, 0, 102));

        labelTitle.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        labelTitle.setForeground(new java.awt.Color(255, 255, 255));
        labelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTitle.setText("View Question Form");

        labelBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/examsimulator/client/image/Entypo_e75e(0)_64.png"))); // NOI18N
        labelBack.setText("jLabel1");
        labelBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelBackMouseClicked(evt);
            }
        });

        labelExit.setBackground(new java.awt.Color(255, 255, 255));
        labelExit.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelExit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelExit.setText("X");
        labelExit.setOpaque(true);
        labelExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelExitMouseClicked(evt);
            }
        });

        labelMinimize.setBackground(new java.awt.Color(255, 255, 255));
        labelMinimize.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelMinimize.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelMinimize.setText("-");
        labelMinimize.setOpaque(true);
        labelMinimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelMinimizeMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelTitleLayout = new javax.swing.GroupLayout(panelTitle);
        panelTitle.setLayout(panelTitleLayout);
        panelTitleLayout.setHorizontalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelBack, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTitleLayout.createSequentialGroup()
                        .addComponent(labelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(419, 419, 419))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTitleLayout.createSequentialGroup()
                        .addComponent(labelMinimize, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelExit, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        panelTitleLayout.setVerticalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTitleLayout.createSequentialGroup()
                .addGroup(panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTitleLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(labelTitle))
                    .addGroup(panelTitleLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labelExit)
                                .addComponent(labelMinimize))
                            .addComponent(labelBack, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        labelTestDeveloperName.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelTestDeveloperName.setText("Test Developer Name");

        textTestDeveloperName.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        textTestDeveloperName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textTestDeveloperNameKeyReleased(evt);
            }
        });

        labelSubject.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelSubject.setText("Subject");

        textSubject.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        textSubject.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textSubjectKeyReleased(evt);
            }
        });

        textTestDeveloperId.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        textTestDeveloperId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textTestDeveloperIdActionPerformed(evt);
            }
        });

        labelTestDeveloperId.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelTestDeveloperId.setText("Test Developer Id");

        separator.setForeground(new java.awt.Color(0, 0, 0));

        textAreaViewQuestion.setColumns(20);
        textAreaViewQuestion.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        textAreaViewQuestion.setRows(5);
        jScrollPane1.setViewportView(textAreaViewQuestion);

        labelSearch.setBackground(new java.awt.Color(0, 0, 204));
        labelSearch.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelSearch.setForeground(new java.awt.Color(255, 255, 255));
        labelSearch.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelSearch.setText("Search");
        labelSearch.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 153, 255), new java.awt.Color(0, 0, 102)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255))));
        labelSearch.setOpaque(true);
        labelSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelSearchMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelBackGroundLayout = new javax.swing.GroupLayout(panelBackGround);
        panelBackGround.setLayout(panelBackGroundLayout);
        panelBackGroundLayout.setHorizontalGroup(
            panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelBackGroundLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelSubject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelTestDeveloperName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBackGroundLayout.createSequentialGroup()
                        .addComponent(textTestDeveloperName, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                        .addComponent(labelTestDeveloperId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textTestDeveloperId, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addGroup(panelBackGroundLayout.createSequentialGroup()
                        .addComponent(textSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(215, 215, 215))))
            .addGroup(panelBackGroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(separator)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        panelBackGroundLayout.setVerticalGroup(
            panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBackGroundLayout.createSequentialGroup()
                .addComponent(panelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTestDeveloperName)
                    .addComponent(textTestDeveloperName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textTestDeveloperId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTestDeveloperId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSubject)
                    .addComponent(textSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 47, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void labelBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelBackMouseClicked
        new AdministratorMainForm().setVisible(true);
        dispose();
    }//GEN-LAST:event_labelBackMouseClicked

    private void textTestDeveloperNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textTestDeveloperNameKeyReleased
        searchTestDeveloperName();
    }//GEN-LAST:event_textTestDeveloperNameKeyReleased

    private void textTestDeveloperIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textTestDeveloperIdActionPerformed
        searchTestDeveloperId();
    }//GEN-LAST:event_textTestDeveloperIdActionPerformed

    private void textSubjectKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textSubjectKeyReleased
        searchSubject();
    }//GEN-LAST:event_textSubjectKeyReleased

    private void labelSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelSearchMouseClicked
        textAreaViewQuestion.removeAll();
        loadQuestion();
    }//GEN-LAST:event_labelSearchMouseClicked

    private void labelExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelExitMouseClicked
         System.exit(0);
    }//GEN-LAST:event_labelExitMouseClicked

    private void labelMinimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelMinimizeMouseClicked
        setState(ICONIFIED);
    }//GEN-LAST:event_labelMinimizeMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewQuestionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewQuestionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewQuestionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewQuestionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewQuestionForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelBack;
    private javax.swing.JLabel labelExit;
    private javax.swing.JLabel labelMinimize;
    private javax.swing.JLabel labelSearch;
    private javax.swing.JLabel labelSubject;
    private javax.swing.JLabel labelTestDeveloperId;
    private javax.swing.JLabel labelTestDeveloperName;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JPanel panelBackGround;
    private javax.swing.JPanel panelTitle;
    private javax.swing.JSeparator separator;
    private javax.swing.JTextArea textAreaViewQuestion;
    private javax.swing.JTextField textSubject;
    private javax.swing.JTextField textTestDeveloperId;
    private javax.swing.JTextField textTestDeveloperName;
    // End of variables declaration//GEN-END:variables

    private void searchTestDeveloperName() {
        String name=textTestDeveloperName.getText();
        int index=name.length();
        try {
            TestDeveloperController testDeveloperController=ServerConnector.getServerConnector().getTestDeveloperController();
            TestDeveloperDTO testDeveloperDTO=testDeveloperController.searchByNameTestDeveloper(name);
            if (testDeveloperDTO!=null) {
                textTestDeveloperName.setText(testDeveloperDTO.getTestDeveloperName());
                textTestDeveloperName.select(index, 30);
                textTestDeveloperId.setText(testDeveloperDTO.getTestDeveloperId());
            } else {
                JOptionPane.showMessageDialog(this, "Not found test developer!");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchTestDeveloperId() {
        String id=textTestDeveloperId.getText();
        try {
            TestDeveloperController testDeveloperController=ServerConnector.getServerConnector().getTestDeveloperController();
            TestDeveloperDTO testDeveloperDTO=testDeveloperController.search(id);
            if (testDeveloperDTO!=null) {
                textTestDeveloperName.setText(testDeveloperDTO.getTestDeveloperName());
                textSubject.requestFocus();
            } else {
                JOptionPane.showMessageDialog(this, "Not found test developer!");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchSubject() {
        String subject=textSubject.getText();
        int length=subject.length();
        try {
            SubjectContoller subjectContoller=ServerConnector.getServerConnector().getSubjectContoller();
            SubjectDTO subjectDTO=subjectContoller.searchByNameSubject(subject);
            if (subjectDTO!=null) {
                textSubject.setText(subjectDTO.getSubjectName());
                textSubject.select(length, subjectDTO.getSubjectName().length());
            } else {
                JOptionPane.showMessageDialog(this, "Subject Name is incorrect!");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TestDeveloperMainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadQuestion() {
        String testDeveloperId=textTestDeveloperId.getText();        
        String subjectId=getSubjectId();        
        try {
            QuestionController questionController=ServerConnector.getServerConnector().getQuestionController();
            List<QuestionDTO> questionList=questionController.getSelectedQuestion(subjectId, testDeveloperId);
            for (QuestionDTO questionDTO : questionList) {
                textAreaViewQuestion.append(questionDTO.getQuestionId()+". "+questionDTO.getQuestion()+"\nA. "+questionDTO.getOptionOne()+"\nB. "+questionDTO.getOptionTwo()+"\nC. "+questionDTO.getOptionThree()+"\nD. "+questionDTO.getOptionFour()+"\n\n");
                loadAnswer(questionDTO.getQuestionId());
                textAreaViewQuestion.append("Time : "+questionDTO.getTime()+"\n\n");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(AllQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(AllQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(AllQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AllQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String getSubjectId() {
        String subject=textSubject.getText();
        try {
            SubjectContoller subjectContoller=ServerConnector.getServerConnector().getSubjectContoller();
            SubjectDTO subjectDTO=subjectContoller.searchByNameSubject(subject);            
            return subjectDTO.getSubjectId();
        } catch (NotBoundException ex) {
            Logger.getLogger(AllQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(AllQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(AllQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AllQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    private void loadAnswer(String questionId) {
        try {
            AnswerController answerController=ServerConnector.getServerConnector().getAnswerController();
            AnswerDTO answerDTO=answerController.search(questionId);
            textAreaViewQuestion.append("Answer : "+answerDTO.getAnswer()+"\nMarks : "+answerDTO.getMarks()+"\n");
        } catch (NotBoundException ex) {
            Logger.getLogger(AllQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(AllQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(AllQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AllQuestionForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void update(String message) throws RemoteException {
        JOptionPane.showMessageDialog(this, message);
    }
}
