/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.examsimulator.client.view;

import com.examsimulator.client.connector.ServerConnector;
import com.examsimulator.common.controller.SubjectContoller;
import com.examsimulator.common.dto.SubjectDTO;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lahiru Sandeepa
 */
public class SubjectForm extends javax.swing.JFrame {

    private String id="";
    /**
     * Creates new form SubjectForm
     */
    public SubjectForm() {
        initComponents();
        generateId();
        viewAllSubject();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBackGround = new javax.swing.JPanel();
        panelTitle = new javax.swing.JPanel();
        labelTitle = new javax.swing.JLabel();
        labelBack = new javax.swing.JLabel();
        labelExit = new javax.swing.JLabel();
        labelMinimize = new javax.swing.JLabel();
        panelRegisterNewSubject = new javax.swing.JPanel();
        labelSubjectId = new javax.swing.JLabel();
        labelSubjectName = new javax.swing.JLabel();
        textSubjectId = new javax.swing.JTextField();
        textSubjectName = new javax.swing.JTextField();
        labelConfirm = new javax.swing.JLabel();
        panelManageSubject = new javax.swing.JPanel();
        labelManageSubjectId = new javax.swing.JLabel();
        labelManageSubjectName = new javax.swing.JLabel();
        textManageSubjectId = new javax.swing.JTextField();
        textManageSubjectName = new javax.swing.JTextField();
        labelModifySubject = new javax.swing.JLabel();
        labelRemoveSubject = new javax.swing.JLabel();
        panelViewAllSubject = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSubject = new javax.swing.JTable();
        labelRefresh = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        panelBackGround.setBackground(new java.awt.Color(255, 255, 255));

        panelTitle.setBackground(new java.awt.Color(153, 0, 102));

        labelTitle.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        labelTitle.setForeground(new java.awt.Color(255, 255, 255));
        labelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTitle.setText("Subject Form");

        labelBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/examsimulator/client/image/Entypo_e75e(0)_64.png"))); // NOI18N
        labelBack.setText("jLabel1");
        labelBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelBackMouseClicked(evt);
            }
        });

        labelExit.setBackground(new java.awt.Color(255, 255, 255));
        labelExit.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelExit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelExit.setText("X");
        labelExit.setOpaque(true);
        labelExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelExitMouseClicked(evt);
            }
        });

        labelMinimize.setBackground(new java.awt.Color(255, 255, 255));
        labelMinimize.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelMinimize.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelMinimize.setText("-");
        labelMinimize.setOpaque(true);
        labelMinimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelMinimizeMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelTitleLayout = new javax.swing.GroupLayout(panelTitle);
        panelTitle.setLayout(panelTitleLayout);
        panelTitleLayout.setHorizontalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelBack, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 465, Short.MAX_VALUE)
                .addComponent(labelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(416, 416, 416)
                .addComponent(labelMinimize, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelExit, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
        panelTitleLayout.setVerticalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTitleLayout.createSequentialGroup()
                .addGroup(panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTitleLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(labelTitle))
                    .addGroup(panelTitleLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labelExit)
                                .addComponent(labelMinimize))
                            .addComponent(labelBack, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        panelRegisterNewSubject.setBackground(new java.awt.Color(255, 255, 255));
        panelRegisterNewSubject.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Register New Subject", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 1, 14))); // NOI18N

        labelSubjectId.setFont(new java.awt.Font("Baskerville Old Face", 0, 18)); // NOI18N
        labelSubjectId.setText("Subject Id");

        labelSubjectName.setFont(new java.awt.Font("Baskerville Old Face", 0, 18)); // NOI18N
        labelSubjectName.setText("Subject Name");

        textSubjectId.setFont(new java.awt.Font("Baskerville Old Face", 0, 18)); // NOI18N
        textSubjectId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textSubjectIdActionPerformed(evt);
            }
        });

        textSubjectName.setFont(new java.awt.Font("Baskerville Old Face", 0, 18)); // NOI18N

        labelConfirm.setBackground(new java.awt.Color(0, 0, 204));
        labelConfirm.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        labelConfirm.setForeground(new java.awt.Color(255, 255, 255));
        labelConfirm.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelConfirm.setText("Confirm");
        labelConfirm.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 153, 255), new java.awt.Color(0, 0, 102)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255))));
        labelConfirm.setOpaque(true);
        labelConfirm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelConfirmMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelRegisterNewSubjectLayout = new javax.swing.GroupLayout(panelRegisterNewSubject);
        panelRegisterNewSubject.setLayout(panelRegisterNewSubjectLayout);
        panelRegisterNewSubjectLayout.setHorizontalGroup(
            panelRegisterNewSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRegisterNewSubjectLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(panelRegisterNewSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRegisterNewSubjectLayout.createSequentialGroup()
                        .addComponent(labelSubjectName, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textSubjectName, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelRegisterNewSubjectLayout.createSequentialGroup()
                        .addComponent(labelSubjectId, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textSubjectId, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRegisterNewSubjectLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(221, 221, 221))
        );
        panelRegisterNewSubjectLayout.setVerticalGroup(
            panelRegisterNewSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRegisterNewSubjectLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(panelRegisterNewSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSubjectId)
                    .addComponent(textSubjectId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelRegisterNewSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSubjectName)
                    .addComponent(textSubjectName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addComponent(labelConfirm)
                .addContainerGap(58, Short.MAX_VALUE))
        );

        panelManageSubject.setBackground(new java.awt.Color(255, 255, 255));
        panelManageSubject.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Manage Subject", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 1, 14))); // NOI18N

        labelManageSubjectId.setFont(new java.awt.Font("Baskerville Old Face", 0, 18)); // NOI18N
        labelManageSubjectId.setText("Subject Id");

        labelManageSubjectName.setFont(new java.awt.Font("Baskerville Old Face", 0, 18)); // NOI18N
        labelManageSubjectName.setText("Subject Name");

        textManageSubjectId.setFont(new java.awt.Font("Baskerville Old Face", 0, 18)); // NOI18N
        textManageSubjectId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textManageSubjectIdActionPerformed(evt);
            }
        });

        textManageSubjectName.setFont(new java.awt.Font("Baskerville Old Face", 0, 18)); // NOI18N
        textManageSubjectName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textManageSubjectNameKeyReleased(evt);
            }
        });

        labelModifySubject.setBackground(new java.awt.Color(0, 0, 204));
        labelModifySubject.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        labelModifySubject.setForeground(new java.awt.Color(255, 255, 255));
        labelModifySubject.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelModifySubject.setText("Modify Subject");
        labelModifySubject.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 153, 255), new java.awt.Color(0, 0, 102)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255))));
        labelModifySubject.setOpaque(true);
        labelModifySubject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelModifySubjectMouseClicked(evt);
            }
        });

        labelRemoveSubject.setBackground(new java.awt.Color(0, 0, 204));
        labelRemoveSubject.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        labelRemoveSubject.setForeground(new java.awt.Color(255, 255, 255));
        labelRemoveSubject.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelRemoveSubject.setText("Remove Subject");
        labelRemoveSubject.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 153, 255), new java.awt.Color(0, 0, 102)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255))));
        labelRemoveSubject.setOpaque(true);
        labelRemoveSubject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelRemoveSubjectMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelManageSubjectLayout = new javax.swing.GroupLayout(panelManageSubject);
        panelManageSubject.setLayout(panelManageSubjectLayout);
        panelManageSubjectLayout.setHorizontalGroup(
            panelManageSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelManageSubjectLayout.createSequentialGroup()
                .addGroup(panelManageSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelManageSubjectLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(panelManageSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelManageSubjectName, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelManageSubjectId, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelManageSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textManageSubjectId, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textManageSubjectName, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelManageSubjectLayout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(labelModifySubject, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(labelRemoveSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        panelManageSubjectLayout.setVerticalGroup(
            panelManageSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelManageSubjectLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(panelManageSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelManageSubjectId)
                    .addComponent(textManageSubjectId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelManageSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelManageSubjectName)
                    .addComponent(textManageSubjectName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(panelManageSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelModifySubject)
                    .addComponent(labelRemoveSubject))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        panelViewAllSubject.setBackground(new java.awt.Color(255, 255, 255));
        panelViewAllSubject.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "View All Subject", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 1, 14))); // NOI18N

        tableSubject.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject Id", "Subject Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableSubject);
        if (tableSubject.getColumnModel().getColumnCount() > 0) {
            tableSubject.getColumnModel().getColumn(0).setPreferredWidth(25);
            tableSubject.getColumnModel().getColumn(1).setPreferredWidth(50);
        }

        labelRefresh.setBackground(new java.awt.Color(0, 0, 255));
        labelRefresh.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelRefresh.setForeground(new java.awt.Color(255, 255, 255));
        labelRefresh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelRefresh.setText("Refresh");
        labelRefresh.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 255), new java.awt.Color(0, 0, 153)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255))));
        labelRefresh.setOpaque(true);
        labelRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelRefreshMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelViewAllSubjectLayout = new javax.swing.GroupLayout(panelViewAllSubject);
        panelViewAllSubject.setLayout(panelViewAllSubjectLayout);
        panelViewAllSubjectLayout.setHorizontalGroup(
            panelViewAllSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelViewAllSubjectLayout.createSequentialGroup()
                .addContainerGap(58, Short.MAX_VALUE)
                .addGroup(panelViewAllSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64))
        );
        panelViewAllSubjectLayout.setVerticalGroup(
            panelViewAllSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelViewAllSubjectLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(labelRefresh)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelBackGroundLayout = new javax.swing.GroupLayout(panelBackGround);
        panelBackGround.setLayout(panelBackGroundLayout);
        panelBackGroundLayout.setHorizontalGroup(
            panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelBackGroundLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelRegisterNewSubject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelManageSubject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(43, 43, 43)
                .addComponent(panelViewAllSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );
        panelBackGroundLayout.setVerticalGroup(
            panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBackGroundLayout.createSequentialGroup()
                .addComponent(panelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelBackGroundLayout.createSequentialGroup()
                        .addComponent(panelRegisterNewSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(panelManageSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelViewAllSubject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(95, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void labelBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelBackMouseClicked
        new AdministratorMainForm().setVisible(true);
        dispose();
    }//GEN-LAST:event_labelBackMouseClicked

    private void textSubjectIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textSubjectIdActionPerformed
        textSubjectName.requestFocus();
    }//GEN-LAST:event_textSubjectIdActionPerformed

    private void labelConfirmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelConfirmMouseClicked
        String subjectId=textSubjectId.getText();
        String subjectName=textSubjectName.getText();
        SubjectDTO subjectDTO=new SubjectDTO(subjectId, subjectName);
        try {
            SubjectContoller subjectContoller=ServerConnector.getServerConnector().getSubjectContoller();
            boolean isAdd=subjectContoller.add(subjectDTO);
            if (isAdd) {
                JOptionPane.showMessageDialog(this, "New Subject is Added!");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_labelConfirmMouseClicked

    private void textManageSubjectIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textManageSubjectIdActionPerformed
        searchSubjectById();
    }//GEN-LAST:event_textManageSubjectIdActionPerformed

    private void textManageSubjectNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textManageSubjectNameKeyReleased
        searchSubjectByName();
    }//GEN-LAST:event_textManageSubjectNameKeyReleased

    private void labelExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelExitMouseClicked
        System.exit(0);
    }//GEN-LAST:event_labelExitMouseClicked

    private void labelMinimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelMinimizeMouseClicked
        setState(ICONIFIED);
    }//GEN-LAST:event_labelMinimizeMouseClicked

    private void labelModifySubjectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelModifySubjectMouseClicked
        String subjectId=textSubjectId.getText();
        String subjectName=textSubjectName.getText();
        SubjectDTO subjectDTO=new SubjectDTO(subjectId, subjectName);
        try {
            SubjectContoller subjectContoller=ServerConnector.getServerConnector().getSubjectContoller();
            boolean isModify=subjectContoller.modifySubject(subjectDTO);
            if (isModify) {
                JOptionPane.showMessageDialog(this, "Subject is Modified success!");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            try {
                SubjectContoller subjectContoller=ServerConnector.getServerConnector().getSubjectContoller();
                subjectContoller.releaseSubject(subjectId);
            } catch (NotBoundException ex) {
                Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_labelModifySubjectMouseClicked

    private void labelRemoveSubjectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelRemoveSubjectMouseClicked
        String id=textSubjectId.getText();
        try {
            SubjectContoller subjectContoller=ServerConnector.getServerConnector().getSubjectContoller();
            boolean isRemove=subjectContoller.delete(id);
            if (isRemove) {
                JOptionPane.showMessageDialog(this, "Subject is removed success!");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_labelRemoveSubjectMouseClicked

    private void labelRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelRefreshMouseClicked
        viewAllSubject();
    }//GEN-LAST:event_labelRefreshMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SubjectForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SubjectForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SubjectForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SubjectForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SubjectForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelBack;
    private javax.swing.JLabel labelConfirm;
    private javax.swing.JLabel labelExit;
    private javax.swing.JLabel labelManageSubjectId;
    private javax.swing.JLabel labelManageSubjectName;
    private javax.swing.JLabel labelMinimize;
    private javax.swing.JLabel labelModifySubject;
    private javax.swing.JLabel labelRefresh;
    private javax.swing.JLabel labelRemoveSubject;
    private javax.swing.JLabel labelSubjectId;
    private javax.swing.JLabel labelSubjectName;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JPanel panelBackGround;
    private javax.swing.JPanel panelManageSubject;
    private javax.swing.JPanel panelRegisterNewSubject;
    private javax.swing.JPanel panelTitle;
    private javax.swing.JPanel panelViewAllSubject;
    private javax.swing.JTable tableSubject;
    private javax.swing.JTextField textManageSubjectId;
    private javax.swing.JTextField textManageSubjectName;
    private javax.swing.JTextField textSubjectId;
    private javax.swing.JTextField textSubjectName;
    // End of variables declaration//GEN-END:variables

    private void searchSubjectById() {
        String id=textManageSubjectId.getText();
        try {
            SubjectContoller subjectContoller=ServerConnector.getServerConnector().getSubjectContoller();
            if (this.id!=id) {
                subjectContoller.releaseSubject(id);
            }
            
            
            this.id=id;
            
            SubjectDTO subjectDTO=subjectContoller.search(id);
            if (subjectDTO!=null) {
                if (subjectContoller.reserveSubject(id)) {
                    textManageSubjectName.setText(subjectDTO.getSubjectName());
                } else {
                    JOptionPane.showMessageDialog(this, "This subject is already reserved!");
                }                
            } else {
                JOptionPane.showMessageDialog(this, "Not found subject!");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchSubjectByName() {
        String name=textManageSubjectName.getText();
        int index=name.length();
        try {
            SubjectContoller subjectContoller=ServerConnector.getServerConnector().getSubjectContoller();
            SubjectDTO subjectDTO=subjectContoller.searchByNameSubject(name);
            if (!this.id.equals(subjectDTO.getSubjectId())) {
                subjectContoller.releaseSubject(id);
            }
            this.id=subjectDTO.getSubjectId();
            if (subjectDTO!=null) {
                if (subjectContoller.reserveSubject(subjectDTO.getSubjectId())) {
                    textManageSubjectName.setText(subjectDTO.getSubjectName());
                    textManageSubjectName.select(index ,subjectDTO.getSubjectName().length());
                    textManageSubjectId.setText(subjectDTO.getSubjectId());
                } else {
                    JOptionPane.showMessageDialog(this, "This subject is already reserved!");
                }               
            } else {
                JOptionPane.showMessageDialog(this, "Not found subject!");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (StringIndexOutOfBoundsException ex){
            
        }
    }

    private void generateId() {
        try {
            SubjectContoller subjectContoller=ServerConnector.getServerConnector().getSubjectContoller();
            String id=subjectContoller.generateId();
            textSubjectId.setText(id);
        } catch (NotBoundException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void viewAllSubject() {
        try {
            SubjectContoller subjectContoller=ServerConnector.getServerConnector().getSubjectContoller();
            List<SubjectDTO> subjectDTOList=subjectContoller.getAllSuject();
            DefaultTableModel defaultTableModel=(DefaultTableModel) tableSubject.getModel();
            defaultTableModel.setRowCount(0);
            for (SubjectDTO subjectDTO : subjectDTOList) {
                Object[] rowData={subjectDTO.getSubjectId(),subjectDTO.getSubjectName()};
                defaultTableModel.addRow(rowData);
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(SubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
