/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.examsimulator.client.view;

import com.examsimulator.client.connector.ServerConnector;
import com.examsimulator.common.controller.ExamController;
import com.examsimulator.common.controller.MarksController;
import com.examsimulator.common.controller.StudentController;
import com.examsimulator.common.dto.ExamDTO;
import com.examsimulator.common.dto.MarksDTO;
import com.examsimulator.common.dto.StudentDTO;
import com.examsimulator.common.observer.Observer;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lahiru Sandeepa
 */
public class ViewStudentForm extends javax.swing.JPanel implements Observer{

    /**
     * Creates new form ViewStudentForm
     */
    public ViewStudentForm() {
        initComponents();
        try {
            UnicastRemoteObject.exportObject(this, 0);
        } catch (RemoteException ex) {
            Logger.getLogger(ViewStudentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        viewAllStudent();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableStudent = new javax.swing.JTable();
        labelRefresh = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        tableStudent.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tableStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student Id", "Student Name", "NIC", "Telephone No", "Progress"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableStudent.setGridColor(new java.awt.Color(153, 153, 153));
        jScrollPane1.setViewportView(tableStudent);

        labelRefresh.setBackground(new java.awt.Color(0, 0, 204));
        labelRefresh.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelRefresh.setForeground(new java.awt.Color(255, 255, 255));
        labelRefresh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelRefresh.setText("Refresh");
        labelRefresh.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 153, 255), new java.awt.Color(0, 0, 102)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255))));
        labelRefresh.setOpaque(true);
        labelRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelRefreshMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92))
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1018, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(labelRefresh)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(72, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void labelRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelRefreshMouseClicked
        viewAllStudent();
    }//GEN-LAST:event_labelRefreshMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelRefresh;
    private javax.swing.JTable tableStudent;
    // End of variables declaration//GEN-END:variables

    private void viewAllStudent() {
        try {
            StudentController studentController=ServerConnector.getServerConnector().getStudentController();
            List<StudentDTO> studentList=studentController.getAllStudent();
            DefaultTableModel defaultTableModel=(DefaultTableModel) tableStudent.getModel();
            defaultTableModel.setRowCount(0);
            for (StudentDTO student : studentList) {
                int progress=getExam(student.getStudentId());
                Object[] rowData={student.getStudentId(),student.getStudentName(),student.getNic(),student.getTelephoneNo(),progress};
                defaultTableModel.addRow(rowData);
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(ViewStudentForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ViewStudentForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ViewStudentForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ViewStudentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void update(String message) throws RemoteException {
        JOptionPane.showMessageDialog(this, message);
    }

    private int getExam(String studentId) {
        try {
            ExamController examController=ServerConnector.getServerConnector().getExamController();
            List<ExamDTO> examDTOList=examController.searchExamStudentId(studentId);
            int marks=0;
            int numberOfExam=0;
            for (ExamDTO examDTO : examDTOList) {
                marks+=getMarks(examDTO.getExamId());
                numberOfExam+=1;
            }
            int progress=0;
            try{
                progress=marks/numberOfExam;
            }catch(ArithmeticException ex){
                
            }
            return progress;
        } catch (NotBoundException ex) {
            Logger.getLogger(ViewStudentForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ViewStudentForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ViewStudentForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ViewStudentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;
    }

    private int getMarks(String examId) {
        try {
            MarksController marksController=ServerConnector.getServerConnector().getMarksController();
            MarksDTO marksDTO=marksController.search(examId);
            if (marksDTO!=null) {
                return marksDTO.getMarks();
            } else {
                return 0;
            }
            
        } catch (NotBoundException ex) {
            Logger.getLogger(ViewStudentForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ViewStudentForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ViewStudentForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ViewStudentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;
    }

    
}
