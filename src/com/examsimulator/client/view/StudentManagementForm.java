/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.examsimulator.client.view;

import com.examsimulator.client.connector.ServerConnector;
import com.examsimulator.common.controller.StudentController;
import com.examsimulator.common.dto.StudentDTO;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Lahiru Sandeepa
 */
public class StudentManagementForm extends javax.swing.JPanel {

    String studentId = "";

    /**
     * Creates new form StudentManagement
     */
    public StudentManagementForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelStudentId = new javax.swing.JLabel();
        labelStudentName = new javax.swing.JLabel();
        labelNIC = new javax.swing.JLabel();
        labelTelephoneNo = new javax.swing.JLabel();
        textStudentId = new javax.swing.JTextField();
        textStudentName = new javax.swing.JTextField();
        textNIC = new javax.swing.JTextField();
        textTelephoneNo = new javax.swing.JTextField();
        labelModifyStudent = new javax.swing.JLabel();
        labelRemoveStudent = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        labelStudentId.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelStudentId.setText("Student Id");

        labelStudentName.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelStudentName.setText("Student Name");

        labelNIC.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelNIC.setText("NIC");

        labelTelephoneNo.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        labelTelephoneNo.setText("Telephone No");

        textStudentId.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        textStudentId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textStudentIdActionPerformed(evt);
            }
        });

        textStudentName.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        textStudentName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textStudentNameActionPerformed(evt);
            }
        });
        textStudentName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textStudentNameKeyReleased(evt);
            }
        });

        textNIC.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        textNIC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textNICActionPerformed(evt);
            }
        });

        textTelephoneNo.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N

        labelModifyStudent.setBackground(new java.awt.Color(0, 0, 204));
        labelModifyStudent.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        labelModifyStudent.setForeground(new java.awt.Color(255, 255, 255));
        labelModifyStudent.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelModifyStudent.setText("Modify Student");
        labelModifyStudent.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 153, 255), new java.awt.Color(0, 0, 102)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255))));
        labelModifyStudent.setOpaque(true);
        labelModifyStudent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelModifyStudentMouseClicked(evt);
            }
        });

        labelRemoveStudent.setBackground(new java.awt.Color(0, 0, 204));
        labelRemoveStudent.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        labelRemoveStudent.setForeground(new java.awt.Color(255, 255, 255));
        labelRemoveStudent.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelRemoveStudent.setText("Remove Student");
        labelRemoveStudent.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 153, 255), new java.awt.Color(0, 0, 102)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255))));
        labelRemoveStudent.setOpaque(true);
        labelRemoveStudent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelRemoveStudentMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(271, 271, 271)
                        .addComponent(labelModifyStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(labelRemoveStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelTelephoneNo, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textTelephoneNo))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, 795, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textStudentName))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelNIC, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textNIC)))
                .addContainerGap(121, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelStudentId)
                    .addComponent(textStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelStudentName)
                    .addComponent(textStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNIC)
                    .addComponent(textNIC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTelephoneNo)
                    .addComponent(textTelephoneNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 188, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelModifyStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelRemoveStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(158, 158, 158))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void textStudentIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textStudentIdActionPerformed
        searchStudentById();
    }//GEN-LAST:event_textStudentIdActionPerformed

    private void textStudentNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textStudentNameActionPerformed
        textNIC.requestFocus();
    }//GEN-LAST:event_textStudentNameActionPerformed

    private void textNICActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textNICActionPerformed
        textTelephoneNo.requestFocus();
    }//GEN-LAST:event_textNICActionPerformed

    private void labelModifyStudentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelModifyStudentMouseClicked
        String studentId = textStudentId.getText();
        String studentName = textStudentName.getText();
        String nic = textNIC.getText();
        int telephoneNo = Integer.parseInt(textTelephoneNo.getText());
        StudentDTO student = new StudentDTO(studentId, studentName, nic, telephoneNo);
        try {
            StudentController studentController = ServerConnector.getServerConnector().getStudentController();
            boolean isModify = studentController.modifyStudent(student);
            if (isModify) {
                JOptionPane.showMessageDialog(this, "Student detail modify successfully!");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(StudentManagementForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(StudentManagementForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(StudentManagementForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(StudentManagementForm.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            try {
                StudentController studentController = ServerConnector.getServerConnector().getStudentController();
                studentController.releaseStudent(studentId);
            } catch (NotBoundException ex) {
                Logger.getLogger(StudentManagementForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(StudentManagementForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(StudentManagementForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_labelModifyStudentMouseClicked

    private void textStudentNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textStudentNameKeyReleased
        searchStudentByName();
    }//GEN-LAST:event_textStudentNameKeyReleased

    private void labelRemoveStudentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelRemoveStudentMouseClicked
        String studentId = textStudentId.getText();
        try {
            StudentController studentController = ServerConnector.getServerConnector().getStudentController();
            boolean isRemove = studentController.delete(studentId);
            if (isRemove) {
                JOptionPane.showMessageDialog(this, "Student detail remove successfully!");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(StudentManagementForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(StudentManagementForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(StudentManagementForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(StudentManagementForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_labelRemoveStudentMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel labelModifyStudent;
    private javax.swing.JLabel labelNIC;
    private javax.swing.JLabel labelRemoveStudent;
    private javax.swing.JLabel labelStudentId;
    private javax.swing.JLabel labelStudentName;
    private javax.swing.JLabel labelTelephoneNo;
    private javax.swing.JTextField textNIC;
    private javax.swing.JTextField textStudentId;
    private javax.swing.JTextField textStudentName;
    private javax.swing.JTextField textTelephoneNo;
    // End of variables declaration//GEN-END:variables

    private void searchStudentById() {
        String studentId = textStudentId.getText();
        try {
            StudentController studentController = ServerConnector.getServerConnector().getStudentController();
            if (this.studentId != studentId) {
                studentController.releaseStudent(studentId);
            }
            this.studentId = studentId;
            StudentDTO student = studentController.search(studentId);
            if (student != null) {
                if (studentController.reserveStudent(studentId)) {
                    textStudentName.setText(student.getStudentName());
                    textNIC.setText(student.getNic());
                    textTelephoneNo.setText(Integer.toString(student.getTelephoneNo()));
                } else {
                    JOptionPane.showMessageDialog(this, "This student is already reserved!");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Not found student!");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(StudentManagementForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(StudentManagementForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(StudentManagementForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(StudentManagementForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchStudentByName() {
        String studentName = textStudentName.getText();
        int index = studentName.length();
        try {
            StudentController studentController = ServerConnector.getServerConnector().getStudentController();
            StudentDTO student = studentController.searchByNameStudent(studentName);
            if (this.studentId != student.getStudentId()) {
                studentController.releaseStudent(studentId);
            } 
            this.studentId=student.getStudentId();
            if (student != null) {
                if (studentController.reserveStudent(studentId)) {
                    textStudentId.setText(student.getStudentId());
                    textStudentName.setText(student.getStudentName());
                    textStudentName.select(index, 30);
                    textNIC.setText(student.getNic());
                    textTelephoneNo.setText(Integer.toString(student.getTelephoneNo()));
                } else {
                    JOptionPane.showMessageDialog(this, "This student already reserved!");
                }              
            } else {
                JOptionPane.showMessageDialog(this, "Not found student!");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(StudentManagementForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(StudentManagementForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(StudentManagementForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(StudentManagementForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (StringIndexOutOfBoundsException ex){}
    }
}
